{"version":3,"sources":["../../../node_modules/@tanstack/query-core/src/subscribable.ts","../../../node_modules/@tanstack/query-core/src/utils.ts","../../../node_modules/@tanstack/query-core/src/focusManager.ts","../../../node_modules/@tanstack/query-core/src/onlineManager.ts","../../../node_modules/@tanstack/query-core/src/thenable.ts","../../../node_modules/@tanstack/query-core/src/retryer.ts","../../../node_modules/@tanstack/query-core/src/notifyManager.ts","../../../node_modules/@tanstack/query-core/src/query.ts","../../../node_modules/@tanstack/query-core/src/mutation.ts","../../../node_modules/@tanstack/query-core/src/queryObserver.ts","../../../node_modules/@tanstack/query-core/src/mutationObserver.ts","../../../node_modules/@tanstack/react-query/src/QueryClientProvider.tsx","../../../node_modules/@tanstack/react-query/src/QueryErrorResetBoundary.tsx","../../../node_modules/@tanstack/react-query/src/utils.ts","../../../node_modules/@tanstack/react-query/src/errorBoundaryUtils.ts","../../../node_modules/@tanstack/react-query/src/isRestoring.ts","../../../node_modules/@tanstack/react-query/src/suspense.ts","../../../node_modules/@tanstack/react-query/src/useBaseQuery.ts","../../../node_modules/@tanstack/react-query/src/useQuery.ts","../../../node_modules/@tanstack/react-query/src/useMutation.ts"],"names":["__privateAdd","__privateSet","__privateGet","_a","_cleanup","_setup","__spreadValues","__privateMethod","__spreadProps","_client","_currentResult","notify_fn","_b","React","React2","noop","React3","React4","React5","React6"],"mappings":"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","file":"chunk-VRBYCNKS.js","sourcesContent":["export class Subscribable<TListener extends Function> {\n  protected listeners = new Set<TListener>()\n\n  constructor() {\n    this.subscribe = this.subscribe.bind(this)\n  }\n\n  subscribe(listener: TListener): () => void {\n    this.listeners.add(listener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners.delete(listener)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.size > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","import type {\n  DefaultError,\n  Enabled,\n  FetchStatus,\n  MutationKey,\n  MutationStatus,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n  StaleTime,\n} from './types'\nimport type { Mutation } from './mutation'\nimport type { FetchOptions, Query } from './query'\n\n// TYPES\n\nexport interface QueryFilters<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  /**\n   * Filter to active queries, inactive queries or all queries\n   */\n  type?: QueryTypeFilter\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query<TQueryFnData, TError, TData, TQueryKey>) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: TQueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include queries matching their fetchStatus\n   */\n  fetchStatus?: FetchStatus\n}\n\nexport interface MutationFilters<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (\n    mutation: Mutation<TData, TError, TVariables, TContext>,\n  ) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Filter by mutation status\n   */\n  status?: MutationStatus\n}\n\nexport type Updater<TInput, TOutput> = TOutput | ((input: TInput) => TOutput)\n\nexport type QueryTypeFilter = 'all' | 'active' | 'inactive'\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined' || 'Deno' in globalThis\n\nexport function noop(): void\nexport function noop(): undefined\nexport function noop() {}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput,\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as (_: TInput) => TOutput)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: unknown): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function resolveStaleTime<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  staleTime: undefined | StaleTime<TQueryFnData, TError, TData, TQueryKey>,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n): number | undefined {\n  return typeof staleTime === 'function' ? staleTime(query) : staleTime\n}\n\nexport function resolveEnabled<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  enabled: undefined | Enabled<TQueryFnData, TError, TData, TQueryKey>,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n): boolean | undefined {\n  return typeof enabled === 'function' ? enabled(query) : enabled\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>,\n): boolean {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (queryKey) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive()\n    if (type === 'active' && !isActive) {\n      return false\n    }\n    if (type === 'inactive' && isActive) {\n      return false\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (fetchStatus && fetchStatus !== query.state.fetchStatus) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>,\n): boolean {\n  const { exact, status, predicate, mutationKey } = filters\n  if (mutationKey) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (hashKey(mutation.options.mutationKey) !== hashKey(mutationKey)) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (status && mutation.state.status !== status) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: Pick<QueryOptions<any, any, any, any>, 'queryKeyHashFn'>,\n): string {\n  const hashFn = options?.queryKeyHashFn || hashKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query & mutation keys hash function.\n * Hashes the value into a stable hash.\n */\nexport function hashKey(queryKey: QueryKey | MutationKey): string {\n  return JSON.stringify(queryKey, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val,\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean\nexport function partialMatchKey(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some((key) => !partialMatchKey(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aItems = array ? a : Object.keys(a)\n    const aSize = aItems.length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      if (\n        ((!array && aItems.includes(key)) || array) &&\n        a[key] === undefined &&\n        b[key] === undefined\n      ) {\n        copy[key] = undefined\n        equalItems++\n      } else {\n        copy[key] = replaceEqualDeep(a[key], b[key])\n        if (copy[key] === a[key] && a[key] !== undefined) {\n          equalItems++\n        }\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects.\n */\nexport function shallowEqualObjects<T extends Record<string, any>>(\n  a: T,\n  b: T | undefined,\n): boolean {\n  if (!b || Object.keys(a).length !== Object.keys(b).length) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function isPlainArray(value: unknown) {\n  return Array.isArray(value) && value.length === Object.keys(value).length\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\n// eslint-disable-next-line @typescript-eslint/no-wrapper-object-types\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has no constructor\n  const ctor = o.constructor\n  if (ctor === undefined) {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Handles Objects created by Object.create(<arbitrary prototype>)\n  if (Object.getPrototypeOf(o) !== Object.prototype) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeout)\n  })\n}\n\nexport function replaceData<\n  TData,\n  TOptions extends QueryOptions<any, any, any, any>,\n>(prevData: TData | undefined, data: TData, options: TOptions): TData {\n  if (typeof options.structuralSharing === 'function') {\n    return options.structuralSharing(prevData, data) as TData\n  } else if (options.structuralSharing !== false) {\n    if (process.env.NODE_ENV !== 'production') {\n      try {\n        return replaceEqualDeep(prevData, data)\n      } catch (error) {\n        console.error(\n          `Structural sharing requires data to be JSON serializable. To fix this, turn off structuralSharing or return JSON-serializable data from your queryFn. [${options.queryHash}]: ${error}`,\n        )\n      }\n    }\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data)\n  }\n  return data\n}\n\nexport function keepPreviousData<T>(\n  previousData: T | undefined,\n): T | undefined {\n  return previousData\n}\n\nexport function addToEnd<T>(items: Array<T>, item: T, max = 0): Array<T> {\n  const newItems = [...items, item]\n  return max && newItems.length > max ? newItems.slice(1) : newItems\n}\n\nexport function addToStart<T>(items: Array<T>, item: T, max = 0): Array<T> {\n  const newItems = [item, ...items]\n  return max && newItems.length > max ? newItems.slice(0, -1) : newItems\n}\n\nexport const skipToken = Symbol()\nexport type SkipToken = typeof skipToken\n\nexport function ensureQueryFn<\n  TQueryFnData = unknown,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: {\n    queryFn?: QueryFunction<TQueryFnData, TQueryKey> | SkipToken\n    queryHash?: string\n  },\n  fetchOptions?: FetchOptions<TQueryFnData>,\n): QueryFunction<TQueryFnData, TQueryKey> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (options.queryFn === skipToken) {\n      console.error(\n        `Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${options.queryHash}'`,\n      )\n    }\n  }\n\n  // if we attempt to retry a fetch that was triggered from an initialPromise\n  // when we don't have a queryFn yet, we can't retry, so we just return the already rejected initialPromise\n  // if an observer has already mounted, we will be able to retry with that queryFn\n  if (!options.queryFn && fetchOptions?.initialPromise) {\n    return () => fetchOptions.initialPromise!\n  }\n\n  if (!options.queryFn || options.queryFn === skipToken) {\n    return () =>\n      Promise.reject(new Error(`Missing queryFn: '${options.queryHash}'`))\n  }\n\n  return options.queryFn\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype Listener = (focused: boolean) => void\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void,\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable<Listener> {\n  #focused?: boolean\n  #cleanup?: () => void\n\n  #setup: SetupFn\n\n  constructor() {\n    super()\n    this.#setup = (onFocus) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibilitychange\n        window.addEventListener('visibilitychange', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n        }\n      }\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.()\n      this.#cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.#setup = setup\n    this.#cleanup?.()\n    this.#cleanup = setup((focused) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    const changed = this.#focused !== focused\n    if (changed) {\n      this.#focused = focused\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    const isFocused = this.isFocused()\n    this.listeners.forEach((listener) => {\n      listener(isFocused)\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.#focused === 'boolean') {\n      return this.#focused\n    }\n\n    // document global can be unavailable in react native\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return globalThis.document?.visibilityState !== 'hidden'\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype Listener = (online: boolean) => void\ntype SetupFn = (setOnline: Listener) => (() => void) | undefined\n\nexport class OnlineManager extends Subscribable<Listener> {\n  #online = true\n  #cleanup?: () => void\n\n  #setup: SetupFn\n\n  constructor() {\n    super()\n    this.#setup = (onOnline) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const onlineListener = () => onOnline(true)\n        const offlineListener = () => onOnline(false)\n        // Listen to online\n        window.addEventListener('online', onlineListener, false)\n        window.addEventListener('offline', offlineListener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', onlineListener)\n          window.removeEventListener('offline', offlineListener)\n        }\n      }\n\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.()\n      this.#cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.#setup = setup\n    this.#cleanup?.()\n    this.#cleanup = setup(this.setOnline.bind(this))\n  }\n\n  setOnline(online: boolean): void {\n    const changed = this.#online !== online\n\n    if (changed) {\n      this.#online = online\n      this.listeners.forEach((listener) => {\n        listener(online)\n      })\n    }\n  }\n\n  isOnline(): boolean {\n    return this.#online\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","/**\n * Thenable types which matches React's types for promises\n *\n * React seemingly uses `.status`, `.value` and `.reason` properties on a promises to optimistically unwrap data from promises\n *\n * @see https://github.com/facebook/react/blob/main/packages/shared/ReactTypes.js#L112-L138\n * @see https://github.com/facebook/react/blob/4f604941569d2e8947ce1460a0b2997e835f37b9/packages/react-debug-tools/src/ReactDebugHooks.js#L224-L227\n */\n\ninterface Fulfilled<T> {\n  status: 'fulfilled'\n  value: T\n}\ninterface Rejected {\n  status: 'rejected'\n  reason: unknown\n}\ninterface Pending<T> {\n  status: 'pending'\n\n  /**\n   * Resolve the promise with a value.\n   * Will remove the `resolve` and `reject` properties from the promise.\n   */\n  resolve: (value: T) => void\n  /**\n   * Reject the promise with a reason.\n   * Will remove the `resolve` and `reject` properties from the promise.\n   */\n  reject: (reason: unknown) => void\n}\n\nexport type FulfilledThenable<T> = Promise<T> & Fulfilled<T>\nexport type RejectedThenable<T> = Promise<T> & Rejected\nexport type PendingThenable<T> = Promise<T> & Pending<T>\n\nexport type Thenable<T> =\n  | FulfilledThenable<T>\n  | RejectedThenable<T>\n  | PendingThenable<T>\n\nexport function pendingThenable<T>(): PendingThenable<T> {\n  let resolve: Pending<T>['resolve']\n  let reject: Pending<T>['reject']\n  // this could use `Promise.withResolvers()` in the future\n  const thenable = new Promise((_resolve, _reject) => {\n    resolve = _resolve\n    reject = _reject\n  }) as PendingThenable<T>\n\n  thenable.status = 'pending'\n  thenable.catch(() => {\n    // prevent unhandled rejection errors\n  })\n\n  function finalize(data: Fulfilled<T> | Rejected) {\n    Object.assign(thenable, data)\n\n    // clear pending props props to avoid calling them twice\n    delete (thenable as Partial<PendingThenable<T>>).resolve\n    delete (thenable as Partial<PendingThenable<T>>).reject\n  }\n\n  thenable.resolve = (value) => {\n    finalize({\n      status: 'fulfilled',\n      value,\n    })\n\n    resolve(value)\n  }\n  thenable.reject = (reason) => {\n    finalize({\n      status: 'rejected',\n      reason,\n    })\n\n    reject(reason)\n  }\n\n  return thenable\n}\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { pendingThenable } from './thenable'\nimport { isServer, sleep } from './utils'\nimport type { CancelOptions, DefaultError, NetworkMode } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = DefaultError> {\n  fn: () => TData | Promise<TData>\n  initialPromise?: Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode: NetworkMode | undefined\n  canRun: () => boolean\n}\n\nexport interface Retryer<TData = unknown> {\n  promise: Promise<TData>\n  cancel: (cancelOptions?: CancelOptions) => void\n  continue: () => Promise<unknown>\n  cancelRetry: () => void\n  continueRetry: () => void\n  canStart: () => boolean\n  start: () => Promise<TData>\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\nexport function canFetch(networkMode: NetworkMode | undefined): boolean {\n  return (networkMode ?? 'online') === 'online'\n    ? onlineManager.isOnline()\n    : true\n}\n\nexport class CancelledError extends Error {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    super('CancelledError')\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function createRetryer<TData = unknown, TError = DefaultError>(\n  config: RetryerConfig<TData, TError>,\n): Retryer<TData> {\n  let isRetryCancelled = false\n  let failureCount = 0\n  let isResolved = false\n  let continueFn: ((value?: unknown) => void) | undefined\n\n  const thenable = pendingThenable<TData>()\n\n  const cancel = (cancelOptions?: CancelOptions): void => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions))\n\n      config.abort?.()\n    }\n  }\n  const cancelRetry = () => {\n    isRetryCancelled = true\n  }\n\n  const continueRetry = () => {\n    isRetryCancelled = false\n  }\n\n  const canContinue = () =>\n    focusManager.isFocused() &&\n    (config.networkMode === 'always' || onlineManager.isOnline()) &&\n    config.canRun()\n\n  const canStart = () => canFetch(config.networkMode) && config.canRun()\n\n  const resolve = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onSuccess?.(value)\n      continueFn?.()\n      thenable.resolve(value)\n    }\n  }\n\n  const reject = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onError?.(value)\n      continueFn?.()\n      thenable.reject(value)\n    }\n  }\n\n  const pause = () => {\n    return new Promise((continueResolve) => {\n      continueFn = (value) => {\n        if (isResolved || canContinue()) {\n          continueResolve(value)\n        }\n      }\n      config.onPause?.()\n    }).then(() => {\n      continueFn = undefined\n      if (!isResolved) {\n        config.onContinue?.()\n      }\n    })\n  }\n\n  // Create loop function\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return\n    }\n\n    let promiseOrValue: any\n\n    // we can re-use config.initialPromise on the first call of run()\n    const initialPromise =\n      failureCount === 0 ? config.initialPromise : undefined\n\n    // Execute query\n    try {\n      promiseOrValue = initialPromise ?? config.fn()\n    } catch (error) {\n      promiseOrValue = Promise.reject(error)\n    }\n\n    Promise.resolve(promiseOrValue)\n      .then(resolve)\n      .catch((error) => {\n        // Stop if the fetch is already resolved\n        if (isResolved) {\n          return\n        }\n\n        // Do we need to retry the request?\n        const retry = config.retry ?? (isServer ? 0 : 3)\n        const retryDelay = config.retryDelay ?? defaultRetryDelay\n        const delay =\n          typeof retryDelay === 'function'\n            ? retryDelay(failureCount, error)\n            : retryDelay\n        const shouldRetry =\n          retry === true ||\n          (typeof retry === 'number' && failureCount < retry) ||\n          (typeof retry === 'function' && retry(failureCount, error))\n\n        if (isRetryCancelled || !shouldRetry) {\n          // We are done if the query does not need to be retried\n          reject(error)\n          return\n        }\n\n        failureCount++\n\n        // Notify on fail\n        config.onFail?.(failureCount, error)\n\n        // Delay\n        sleep(delay)\n          // Pause if the document is not visible or when the device is offline\n          .then(() => {\n            return canContinue() ? undefined : pause()\n          })\n          .then(() => {\n            if (isRetryCancelled) {\n              reject(error)\n            } else {\n              run()\n            }\n          })\n      })\n  }\n\n  return {\n    promise: thenable,\n    cancel,\n    continue: () => {\n      continueFn?.()\n      return thenable\n    },\n    cancelRetry,\n    continueRetry,\n    canStart,\n    start: () => {\n      // Start loop\n      if (canStart()) {\n        run()\n      } else {\n        pause().then(run)\n      }\n      return thenable\n    },\n  }\n}\n","// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\ntype BatchCallsCallback<T extends Array<unknown>> = (...args: T) => void\n\ntype ScheduleFunction = (callback: () => void) => void\n\nexport function createNotifyManager() {\n  let queue: Array<NotifyCallback> = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = (callback) => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n  let scheduleFn: ScheduleFunction = (cb) => setTimeout(cb, 0)\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleFn(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleFn(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  return {\n    batch: <T>(callback: () => T): T => {\n      let result\n      transactions++\n      try {\n        result = callback()\n      } finally {\n        transactions--\n        if (!transactions) {\n          flush()\n        }\n      }\n      return result\n    },\n    /**\n     * All calls to the wrapped function will be batched.\n     */\n    batchCalls: <T extends Array<unknown>>(\n      callback: BatchCallsCallback<T>,\n    ): BatchCallsCallback<T> => {\n      return (...args) => {\n        schedule(() => {\n          callback(...args)\n        })\n      }\n    },\n    schedule,\n    /**\n     * Use this method to set a custom notify function.\n     * This can be used to for example wrap notifications with `React.act` while running tests.\n     */\n    setNotifyFunction: (fn: NotifyFunction) => {\n      notifyFn = fn\n    },\n    /**\n     * Use this method to set a custom function to batch notifications together into a single tick.\n     * By default React Query will use the batch function provided by ReactDOM or React Native.\n     */\n    setBatchNotifyFunction: (fn: BatchNotifyFunction) => {\n      batchNotifyFn = fn\n    },\n    setScheduler: (fn: ScheduleFunction) => {\n      scheduleFn = fn\n    },\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n","import {\n  ensureQueryFn,\n  noop,\n  replaceData,\n  resolveEnabled,\n  skipToken,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { canFetch, createRetryer, isCancelledError } from './retryer'\nimport { Removable } from './removable'\nimport type {\n  CancelOptions,\n  DefaultError,\n  FetchStatus,\n  InitialDataFunction,\n  OmitKeyof,\n  QueryFunction,\n  QueryFunctionContext,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n  QueryStatus,\n  SetDataOptions,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = DefaultError> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchFailureReason: TError | null\n  fetchMeta: FetchMeta | null\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n    query: Query,\n  ) => void\n}\n\nexport type FetchDirection = 'forward' | 'backward'\n\nexport interface FetchMeta {\n  fetchMore?: { direction: FetchDirection }\n}\n\nexport interface FetchOptions<TData = unknown> {\n  cancelRefetch?: boolean\n  meta?: FetchMeta\n  initialPromise?: Promise<TData>\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: FetchMeta\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: Partial<QueryState<TData, TError>>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state: QueryState<TData, TError>\n\n  #initialState: QueryState<TData, TError>\n  #revertState?: QueryState<TData, TError>\n  #cache: QueryCache\n  #retryer?: Retryer<TData>\n  observers: Array<QueryObserver<any, any, any, any, any>>\n  #defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  #abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.#abortSignalConsumed = false\n    this.#defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.#cache = config.cache\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.#initialState = getDefaultState(this.options)\n    this.state = config.state ?? this.#initialState\n    this.scheduleGc()\n  }\n  get meta(): QueryMeta | undefined {\n    return this.options.meta\n  }\n\n  get promise(): Promise<TData> | undefined {\n    return this.#retryer?.promise\n  }\n\n  setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): void {\n    this.options = { ...this.#defaultOptions, ...options }\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.#cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean },\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.#dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: Partial<QueryState<TData, TError>>,\n    setStateOptions?: SetStateOptions,\n  ): void {\n    this.#dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.#retryer?.promise\n    this.#retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.#initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(\n      (observer) => resolveEnabled(observer.options.enabled, this) !== false,\n    )\n  }\n\n  isDisabled(): boolean {\n    if (this.getObserversCount() > 0) {\n      return !this.isActive()\n    }\n    // if a query has no observers, it should still be considered disabled if it never attempted a fetch\n    return (\n      this.options.queryFn === skipToken ||\n      this.state.dataUpdateCount + this.state.errorUpdateCount === 0\n    )\n  }\n\n  isStale(): boolean {\n    if (this.state.isInvalidated) {\n      return true\n    }\n\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(\n        (observer) => observer.getCurrentResult().isStale,\n      )\n    }\n\n    return this.state.data === undefined\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      this.state.data === undefined ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnReconnect())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.#cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.includes(observer)) {\n      this.observers = this.observers.filter((x) => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.#retryer) {\n          if (this.#abortSignalConsumed) {\n            this.#retryer.cancel({ revert: true })\n          } else {\n            this.#retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.#cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.#dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions<TQueryFnData>,\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.data !== undefined && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetch\n        this.cancel({ silent: true })\n      } else if (this.#retryer) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.#retryer.continueRetry()\n        // Return current promise if we are already fetching\n        return this.#retryer.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find((x) => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`,\n        )\n      }\n    }\n\n    const abortController = new AbortController()\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          this.#abortSignalConsumed = true\n          return abortController.signal\n        },\n      })\n    }\n\n    // Create fetch function\n    const fetchFn = () => {\n      const queryFn = ensureQueryFn(this.options, fetchOptions)\n\n      // Create query function context\n      const queryFnContext: OmitKeyof<\n        QueryFunctionContext<TQueryKey>,\n        'signal'\n      > = {\n        queryKey: this.queryKey,\n        meta: this.meta,\n      }\n\n      addSignalProperty(queryFnContext)\n\n      this.#abortSignalConsumed = false\n      if (this.options.persister) {\n        return this.options.persister(\n          queryFn as QueryFunction<any>,\n          queryFnContext as QueryFunctionContext<TQueryKey>,\n          this as unknown as Query,\n        )\n      }\n\n      return queryFn(queryFnContext as QueryFunctionContext<TQueryKey>)\n    }\n\n    // Trigger behavior hook\n    const context: OmitKeyof<\n      FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n      'signal'\n    > = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn,\n    }\n\n    addSignalProperty(context)\n\n    this.options.behavior?.onFetch(\n      context as FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n      this as unknown as Query,\n    )\n\n    // Store state in case the current fetch needs to be reverted\n    this.#revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.#dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.#dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.#cache.config.onError?.(\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n        this.#cache.config.onSettled?.(\n          this.state.data,\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n      }\n\n      // Schedule query gc after fetching\n      this.scheduleGc()\n    }\n\n    // Try to fetch the data\n    this.#retryer = createRetryer({\n      initialPromise: fetchOptions?.initialPromise as\n        | Promise<TData>\n        | undefined,\n      fn: context.fetchFn as () => Promise<TData>,\n      abort: abortController.abort.bind(abortController),\n      onSuccess: (data) => {\n        if (data === undefined) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error(\n              `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`,\n            )\n          }\n          onError(new Error(`${this.queryHash} data is undefined`) as any)\n          return\n        }\n\n        try {\n          this.setData(data)\n        } catch (error) {\n          onError(error as TError)\n          return\n        }\n\n        // Notify cache callback\n        this.#cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n        this.#cache.config.onSettled?.(\n          data,\n          this.state.error as any,\n          this as Query<any, any, any, any>,\n        )\n\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.#dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n      canRun: () => true,\n    })\n\n    return this.#retryer.start()\n  }\n\n  #dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>,\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            ...fetchState(state.data, this.options),\n            fetchMeta: action.meta ?? null,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null,\n            }),\n          }\n        case 'error':\n          const error = action.error\n\n          if (isCancelledError(error) && error.revert && this.#revertState) {\n            return { ...this.#revertState, fetchStatus: 'idle' }\n          }\n\n          return {\n            ...state,\n            error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onQueryUpdate()\n      })\n\n      this.#cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nexport function fetchState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  data: TData | undefined,\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n) {\n  return {\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? 'fetching' : 'paused',\n    ...(data === undefined &&\n      ({\n        error: null,\n        status: 'pending',\n      } as const)),\n  } as const\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasData = data !== undefined\n\n  const initialDataUpdatedAt = hasData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? (initialDataUpdatedAt ?? Date.now()) : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'pending',\n    fetchStatus: 'idle',\n  }\n}\n","import { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport { createRetryer } from './retryer'\nimport type {\n  DefaultError,\n  MutationMeta,\n  MutationOptions,\n  MutationStatus,\n} from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  failureReason: TError | null\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n  submittedAt: number\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError | null\n}\n\ninterface PendingAction<TVariables, TContext> {\n  type: 'pending'\n  isPaused: boolean\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | PendingAction<TVariables, TContext>\n  | PauseAction\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options!: MutationOptions<TData, TError, TVariables, TContext>\n  readonly mutationId: number\n\n  #observers: Array<MutationObserver<TData, TError, TVariables, TContext>>\n  #mutationCache: MutationCache\n  #retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.mutationId = config.mutationId\n    this.#mutationCache = config.mutationCache\n    this.#observers = []\n    this.state = config.state || getDefaultState()\n\n    this.setOptions(config.options)\n    this.scheduleGc()\n  }\n\n  setOptions(\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n  ): void {\n    this.options = options\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  get meta(): MutationMeta | undefined {\n    return this.options.meta\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (!this.#observers.includes(observer)) {\n      this.#observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.#mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.#observers = this.#observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.#mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.#observers.length) {\n      if (this.state.status === 'pending') {\n        this.scheduleGc()\n      } else {\n        this.#mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<unknown> {\n    return (\n      this.#retryer?.continue() ??\n      // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n      this.execute(this.state.variables!)\n    )\n  }\n\n  async execute(variables: TVariables): Promise<TData> {\n    this.#retryer = createRetryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject(new Error('No mutationFn found'))\n        }\n        return this.options.mutationFn(variables)\n      },\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.#dispatch({ type: 'continue' })\n      },\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n      networkMode: this.options.networkMode,\n      canRun: () => this.#mutationCache.canRun(this),\n    })\n\n    const restored = this.state.status === 'pending'\n    const isPaused = !this.#retryer.canStart()\n\n    try {\n      if (!restored) {\n        this.#dispatch({ type: 'pending', variables, isPaused })\n        // Notify cache callback\n        await this.#mutationCache.config.onMutate?.(\n          variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n        const context = await this.options.onMutate?.(variables)\n        if (context !== this.state.context) {\n          this.#dispatch({\n            type: 'pending',\n            context,\n            variables,\n            isPaused,\n          })\n        }\n      }\n      const data = await this.#retryer.start()\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSuccess?.(\n        data,\n        variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSuccess?.(data, variables, this.state.context!)\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSettled?.(\n        data,\n        null,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSettled?.(data, null, variables, this.state.context)\n\n      this.#dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        await this.#mutationCache.config.onError?.(\n          error as any,\n          variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onError?.(\n          error as TError,\n          variables,\n          this.state.context,\n        )\n\n        // Notify cache callback\n        await this.#mutationCache.config.onSettled?.(\n          undefined,\n          error as any,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          variables,\n          this.state.context,\n        )\n        throw error\n      } finally {\n        this.#dispatch({ type: 'error', error: error as TError })\n      }\n    } finally {\n      this.#mutationCache.runNext(this)\n    }\n  }\n\n  #dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>,\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'pending':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: action.isPaused,\n            status: 'pending',\n            variables: action.variables,\n            submittedAt: Date.now(),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error',\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.#observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.#mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n    submittedAt: 0,\n  }\n}\n","import { focusManager } from './focusManager'\nimport { notifyManager } from './notifyManager'\nimport { fetchState } from './query'\nimport { Subscribable } from './subscribable'\nimport { pendingThenable } from './thenable'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport type { FetchOptions, Query, QueryState } from './query'\nimport type { QueryClient } from './queryClient'\nimport type { PendingThenable, Thenable } from './thenable'\nimport type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  listeners?: boolean\n}\n\ninterface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  #client: QueryClient\n  #currentQuery: Query<TQueryFnData, TError, TQueryData, TQueryKey> = undefined!\n  #currentQueryInitialState: QueryState<TQueryData, TError> = undefined!\n  #currentResult: QueryObserverResult<TData, TError> = undefined!\n  #currentResultState?: QueryState<TQueryData, TError>\n  #currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  #currentThenable: Thenable<TData>\n  #selectError: TError | null\n  #selectFn?: (data: TQueryData) => TData\n  #selectResult?: TData\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData?: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  #staleTimeoutId?: ReturnType<typeof setTimeout>\n  #refetchIntervalId?: ReturnType<typeof setInterval>\n  #currentRefetchInterval?: number | false\n  #trackedProps = new Set<keyof QueryObserverResult>()\n\n  constructor(\n    client: QueryClient,\n    public options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.#client = client\n    this.#selectError = null\n    this.#currentThenable = pendingThenable()\n    if (!this.options.experimental_prefetchInRender) {\n      this.#currentThenable.reject(\n        new Error('experimental_prefetchInRender feature flag is not enabled'),\n      )\n    }\n\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch()\n      } else {\n        this.updateResult()\n      }\n\n      this.#updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#clearStaleTimeout()\n    this.#clearRefetchInterval()\n    this.#currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.#currentQuery\n\n    this.options = this.#client.defaultQueryOptions(options)\n\n    if (\n      this.options.enabled !== undefined &&\n      typeof this.options.enabled !== 'boolean' &&\n      typeof this.options.enabled !== 'function' &&\n      typeof resolveEnabled(this.options.enabled, this.#currentQuery) !==\n        'boolean'\n    ) {\n      throw new Error(\n        'Expected enabled to be a boolean or a callback that returns a boolean',\n      )\n    }\n\n    this.#updateQuery()\n    this.#currentQuery.setOptions(this.options)\n\n    if (\n      prevOptions._defaulted &&\n      !shallowEqualObjects(this.options, prevOptions)\n    ) {\n      this.#client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.#currentQuery,\n        observer: this,\n      })\n    }\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.#currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.#executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        resolveStaleTime(this.options.staleTime, this.#currentQuery) !==\n          resolveStaleTime(prevOptions.staleTime, this.#currentQuery))\n    ) {\n      this.#updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.#computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        nextRefetchInterval !== this.#currentRefetchInterval)\n    ) {\n      this.#updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.#client.getQueryCache().build(this.#client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult every time\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.#currentResult = result\n      this.#currentResultOptions = this.options\n      this.#currentResultState = this.#currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.#currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n    onPropTracked?: (key: keyof QueryObserverResult) => void,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackProp(key as keyof QueryObserverResult)\n          onPropTracked?.(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  trackProp(key: keyof QueryObserverResult) {\n    this.#trackedProps.add(key)\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.#currentQuery\n  }\n\n  refetch({ ...options }: RefetchOptions = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.#client.defaultQueryOptions(options)\n\n    const query = this.#client\n      .getQueryCache()\n      .build(this.#client, defaultedOptions)\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.#currentResult\n    })\n  }\n\n  #executeFetch(\n    fetchOptions?: Omit<ObserverFetchOptions, 'initialPromise'>,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.#updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.#currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  #updateStaleTimeout(): void {\n    this.#clearStaleTimeout()\n    const staleTime = resolveStaleTime(\n      this.options.staleTime,\n      this.#currentQuery,\n    )\n\n    if (isServer || this.#currentResult.isStale || !isValidTimeout(staleTime)) {\n      return\n    }\n\n    const time = timeUntilStale(this.#currentResult.dataUpdatedAt, staleTime)\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.#staleTimeoutId = setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  #computeRefetchInterval() {\n    return (\n      (typeof this.options.refetchInterval === 'function'\n        ? this.options.refetchInterval(this.#currentQuery)\n        : this.options.refetchInterval) ?? false\n    )\n  }\n\n  #updateRefetchInterval(nextInterval: number | false): void {\n    this.#clearRefetchInterval()\n\n    this.#currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      resolveEnabled(this.options.enabled, this.#currentQuery) === false ||\n      !isValidTimeout(this.#currentRefetchInterval) ||\n      this.#currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.#refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.#executeFetch()\n      }\n    }, this.#currentRefetchInterval)\n  }\n\n  #updateTimers(): void {\n    this.#updateStaleTimeout()\n    this.#updateRefetchInterval(this.#computeRefetchInterval())\n  }\n\n  #clearStaleTimeout(): void {\n    if (this.#staleTimeoutId) {\n      clearTimeout(this.#staleTimeoutId)\n      this.#staleTimeoutId = undefined\n    }\n  }\n\n  #clearRefetchInterval(): void {\n    if (this.#refetchIntervalId) {\n      clearInterval(this.#refetchIntervalId)\n      this.#refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.#currentQuery\n    const prevOptions = this.options\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.#currentResultState\n    const prevResultOptions = this.#currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.#currentQueryInitialState\n\n    const { state } = query\n    let newState = { ...state }\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        newState = {\n          ...newState,\n          ...fetchState(state.data, query.options),\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        newState.fetchStatus = 'idle'\n      }\n    }\n\n    let { error, errorUpdatedAt, status } = newState\n\n    // Select data if needed\n    if (options.select && newState.data !== undefined) {\n      // Memoize select result\n      if (\n        prevResult &&\n        newState.data === prevResultState?.data &&\n        options.select === this.#selectFn\n      ) {\n        data = this.#selectResult\n      } else {\n        try {\n          this.#selectFn = options.select\n          data = options.select(newState.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.#selectResult = data\n          this.#selectError = null\n        } catch (selectError) {\n          this.#selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = newState.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      options.placeholderData !== undefined &&\n      data === undefined &&\n      status === 'pending'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (\n                options.placeholderData as unknown as PlaceholderDataFunction<TQueryData>\n              )(\n                this.#lastQueryWithDefinedData?.state.data,\n                this.#lastQueryWithDefinedData as any,\n              )\n            : options.placeholderData\n        if (options.select && placeholderData !== undefined) {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.#selectError = null\n          } catch (selectError) {\n            this.#selectError = selectError as TError\n          }\n        }\n      }\n\n      if (placeholderData !== undefined) {\n        status = 'success'\n        data = replaceData(\n          prevResult?.data,\n          placeholderData as unknown,\n          options,\n        ) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.#selectError) {\n      error = this.#selectError as any\n      data = this.#selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = newState.fetchStatus === 'fetching'\n    const isPending = status === 'pending'\n    const isError = status === 'error'\n\n    const isLoading = isPending && isFetching\n    const hasData = data !== undefined\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus: newState.fetchStatus,\n      isPending,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: newState.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: newState.fetchFailureCount,\n      failureReason: newState.fetchFailureReason,\n      errorUpdateCount: newState.errorUpdateCount,\n      isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        newState.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        newState.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && !hasData,\n      isPaused: newState.fetchStatus === 'paused',\n      isPlaceholderData,\n      isRefetchError: isError && hasData,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      promise: this.#currentThenable,\n    }\n\n    const nextResult = result as QueryObserverResult<TData, TError>\n\n    if (this.options.experimental_prefetchInRender) {\n      const finalizeThenableIfPossible = (thenable: PendingThenable<TData>) => {\n        if (nextResult.status === 'error') {\n          thenable.reject(nextResult.error)\n        } else if (nextResult.data !== undefined) {\n          thenable.resolve(nextResult.data)\n        }\n      }\n\n      /**\n       * Create a new thenable and result promise when the results have changed\n       */\n      const recreateThenable = () => {\n        const pending =\n          (this.#currentThenable =\n          nextResult.promise =\n            pendingThenable())\n\n        finalizeThenableIfPossible(pending)\n      }\n\n      const prevThenable = this.#currentThenable\n      switch (prevThenable.status) {\n        case 'pending':\n          // Finalize the previous thenable if it was pending\n          // and we are still observing the same query\n          if (query.queryHash === prevQuery.queryHash) {\n            finalizeThenableIfPossible(prevThenable)\n          }\n          break\n        case 'fulfilled':\n          if (\n            nextResult.status === 'error' ||\n            nextResult.data !== prevThenable.value\n          ) {\n            recreateThenable()\n          }\n          break\n        case 'rejected':\n          if (\n            nextResult.status !== 'error' ||\n            nextResult.error !== prevThenable.reason\n          ) {\n            recreateThenable()\n          }\n          break\n      }\n    }\n\n    return nextResult\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.#currentQuery, this.options)\n\n    this.#currentResultState = this.#currentQuery.state\n    this.#currentResultOptions = this.options\n\n    if (this.#currentResultState.data !== undefined) {\n      this.#lastQueryWithDefinedData = this.#currentQuery\n    }\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.#currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = {}\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.#trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps,\n      )\n\n      if (this.options.throwOnError) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey]\n\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.#notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  #updateQuery(): void {\n    const query = this.#client.getQueryCache().build(this.#client, this.options)\n\n    if (query === this.#currentQuery) {\n      return\n    }\n\n    const prevQuery = this.#currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.#currentQuery = query\n    this.#currentQueryInitialState = query.state\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(): void {\n    this.updateResult()\n\n    if (this.hasListeners()) {\n      this.#updateTimers()\n    }\n  }\n\n  #notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First, trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: 'observerResultsUpdated',\n      })\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.state.data === undefined &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.data !== undefined &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: (typeof options)['refetchOnMount'] &\n    (typeof options)['refetchOnWindowFocus'] &\n    (typeof options)['refetchOnReconnect'],\n) {\n  if (resolveEnabled(options.enabled, query) !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    (query !== prevQuery ||\n      resolveEnabled(prevOptions.enabled, query) === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.isStaleByTime(resolveStaleTime(options.staleTime, query))\n  )\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n) {\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n","import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { hashKey, shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  DefaultError,\n  MutateOptions,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  #client: QueryClient\n  #currentResult: MutationObserverResult<TData, TError, TVariables, TContext> =\n    undefined!\n  #currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  #mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.#client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.#updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options as\n      | MutationObserverOptions<TData, TError, TVariables, TContext>\n      | undefined\n    this.options = this.#client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.#currentMutation,\n        observer: this,\n      })\n    }\n\n    if (\n      prevOptions?.mutationKey &&\n      this.options.mutationKey &&\n      hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)\n    ) {\n      this.reset()\n    } else if (this.#currentMutation?.state.status === 'pending') {\n      this.#currentMutation.setOptions(this.options)\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.#updateResult()\n\n    this.#notify(action)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.#currentResult\n  }\n\n  reset(): void {\n    // reset needs to remove the observer from the mutation because there is no way to \"get it back\"\n    // another mutate call will yield a new mutation!\n    this.#currentMutation?.removeObserver(this)\n    this.#currentMutation = undefined\n    this.#updateResult()\n    this.#notify()\n  }\n\n  mutate(\n    variables: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.#mutateOptions = options\n\n    this.#currentMutation?.removeObserver(this)\n\n    this.#currentMutation = this.#client\n      .getMutationCache()\n      .build(this.#client, this.options)\n\n    this.#currentMutation.addObserver(this)\n\n    return this.#currentMutation.execute(variables)\n  }\n\n  #updateResult(): void {\n    const state =\n      this.#currentMutation?.state ??\n      getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === 'pending',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    } as MutationObserverResult<TData, TError, TVariables, TContext>\n  }\n\n  #notify(action?: Action<TData, TError, TVariables, TContext>): void {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables!\n        const context = this.#currentResult.context\n\n        if (action?.type === 'success') {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context!)\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context)\n        } else if (action?.type === 'error') {\n          this.#mutateOptions.onError?.(action.error, variables, context)\n          this.#mutateOptions.onSettled?.(\n            undefined,\n            action.error,\n            variables,\n            context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult)\n      })\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\n\nimport type { QueryClient } from '@tanstack/query-core'\n\nexport const QueryClientContext = React.createContext<QueryClient | undefined>(\n  undefined,\n)\n\nexport const useQueryClient = (queryClient?: QueryClient) => {\n  const client = React.useContext(QueryClientContext)\n\n  if (queryClient) {\n    return queryClient\n  }\n\n  if (!client) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return client\n}\n\nexport type QueryClientProviderProps = {\n  client: QueryClient\n  children?: React.ReactNode\n}\n\nexport const QueryClientProvider = ({\n  client,\n  children,\n}: QueryClientProviderProps): React.JSX.Element => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  return (\n    <QueryClientContext.Provider value={client}>\n      {children}\n    </QueryClientContext.Provider>\n  )\n}\n","'use client'\nimport * as React from 'react'\n\n// CONTEXT\nexport type QueryErrorResetFunction = () => void\nexport type QueryErrorIsResetFunction = () => boolean\nexport type QueryErrorClearResetFunction = () => void\n\nexport interface QueryErrorResetBoundaryValue {\n  clearReset: QueryErrorClearResetFunction\n  isReset: QueryErrorIsResetFunction\n  reset: QueryErrorResetFunction\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport type QueryErrorResetBoundaryFunction = (\n  value: QueryErrorResetBoundaryValue,\n) => React.ReactNode\n\nexport interface QueryErrorResetBoundaryProps {\n  children: QueryErrorResetBoundaryFunction | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function' ? children(value) : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","export function shouldThrowError<T extends (...args: Array<any>) => boolean>(\n  throwError: boolean | T | undefined,\n  params: Parameters<T>,\n): boolean {\n  // Allow throwError function to override throwing behavior on a per-error basis\n  if (typeof throwError === 'function') {\n    return throwError(...params)\n  }\n\n  return !!throwError\n}\n\nexport function noop(): void {}\n","'use client'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  ThrowOnError,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (\n    options.suspense ||\n    options.throwOnError ||\n    options.experimental_prefetchInRender\n  ) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  throwOnError,\n  query,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  throwOnError: ThrowOnError<TQueryFnData, TError, TQueryData, TQueryKey>\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey> | undefined\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    query &&\n    shouldThrowError(throwOnError, [result.error, query])\n  )\n}\n","'use client'\nimport * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","import type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const defaultThrowOnError = <\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  _error: TError,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n) => query.state.data === undefined\n\nexport const ensureSuspenseTimers = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  const originalStaleTime = defaultedOptions.staleTime\n\n  if (defaultedOptions.suspense) {\n    // Handle staleTime to ensure minimum 1000ms in Suspense mode\n    // This prevents unnecessary refetching when components remount after suspending\n    defaultedOptions.staleTime =\n      typeof originalStaleTime === 'function'\n        ? (...args) => Math.max(originalStaleTime(...args), 1000)\n        : Math.max(originalStaleTime ?? 1000, 1000)\n\n    if (typeof defaultedOptions.gcTime === 'number') {\n      defaultedOptions.gcTime = Math.max(defaultedOptions.gcTime, 1000)\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n) => defaultedOptions?.suspense && result.isPending\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer.fetchOptimistic(defaultedOptions).catch(() => {\n    errorResetBoundary.clearReset()\n  })\n","'use client'\nimport * as React from 'react'\n\nimport { isServer, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { useIsRestoring } from './isRestoring'\nimport {\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch,\n} from './suspense'\nimport { noop } from './utils'\nimport type {\n  QueryClient,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { UseBaseQueryOptions } from './types'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n  queryClient?: QueryClient,\n): QueryObserverResult<TData, TError> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof options !== 'object' || Array.isArray(options)) {\n      throw new Error(\n        'Bad argument type. Starting with v5, only the \"Object\" form is allowed when calling query related functions. Please use the error stack to find the culprit call. More info here: https://tanstack.com/query/latest/docs/react/guides/migrating-to-v5#supports-a-single-signature-one-object',\n      )\n    }\n  }\n\n  const client = useQueryClient(queryClient)\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = client.defaultQueryOptions(options)\n\n  ;(client.getDefaultOptions().queries as any)?._experimental_beforeQuery?.(\n    defaultedOptions,\n  )\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  ensureSuspenseTimers(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  // this needs to be invoked before creating the Observer because that can create a cache entry\n  const isNewCacheEntry = !client\n    .getQueryCache()\n    .get(defaultedOptions.queryHash)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        client,\n        defaultedOptions,\n      ),\n  )\n\n  // note: this must be called before useSyncExternalStore\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  const shouldSubscribe = !isRestoring && options.subscribed !== false\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = shouldSubscribe\n          ? observer.subscribe(notifyManager.batchCalls(onStoreChange))\n          : noop\n\n        // Update result to make sure we did not miss any query updates\n        // between creating the observer and subscribing to it.\n        observer.updateResult()\n\n        return unsubscribe\n      },\n      [observer, shouldSubscribe],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      throwOnError: defaultedOptions.throwOnError,\n      query: client\n        .getQueryCache()\n        .get<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >(defaultedOptions.queryHash),\n    })\n  ) {\n    throw result.error\n  }\n\n  ;(client.getDefaultOptions().queries as any)?._experimental_afterQuery?.(\n    defaultedOptions,\n    result,\n  )\n\n  if (\n    defaultedOptions.experimental_prefetchInRender &&\n    !isServer &&\n    willFetch(result, isRestoring)\n  ) {\n    const promise = isNewCacheEntry\n      ? // Fetch immediately on render in order to ensure `.promise` is resolved even if the component is unmounted\n        fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n      : // subscribe to the \"cache promise\" so that we can finalize the currentThenable once data comes in\n        client.getQueryCache().get(defaultedOptions.queryHash)?.promise\n\n    promise?.catch(noop).finally(() => {\n      // `.updateResult()` will trigger `.#currentThenable` to finalize\n      observer.updateResult()\n    })\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n","'use client'\nimport { QueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type { DefaultError, QueryClient, QueryKey } from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport type {\n  DefinedInitialDataOptions,\n  UndefinedInitialDataOptions,\n} from './queryOptions'\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: DefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UndefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<TData, TError>\n\nexport function useQuery(options: UseQueryOptions, queryClient?: QueryClient) {\n  return useBaseQuery(options, QueryObserver, queryClient)\n}\n","'use client'\nimport * as React from 'react'\nimport { MutationObserver, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { noop, shouldThrowError } from './utils'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport type { DefaultError, QueryClient } from '@tanstack/query-core'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n  queryClient?: QueryClient,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const client = useQueryClient(queryClient)\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        client,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.throwOnError, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n"]}