{"version":3,"sources":["../src/shadcn/form.tsx"],"names":["FormProvider","React","Controller","__spreadValues","useFormContext","__objRest","cn","Label","Slot","Trans"],"mappings":"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","file":"chunk-37HH4VYO.js","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport type * as LabelPrimitive from '@radix-ui/react-label';\nimport { Slot } from '@radix-ui/react-slot';\nimport type { ControllerProps, FieldPath, FieldValues } from 'react-hook-form';\nimport { Controller, FormProvider, useFormContext } from 'react-hook-form';\n\nimport { cn } from '../lib/utils';\nimport { Trans } from '../makerkit/trans';\nimport { Label } from './label';\n\nconst Form = FormProvider;\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName;\n};\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue,\n);\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  );\n};\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext);\n  const itemContext = React.useContext(FormItemContext);\n  const { getFieldState, formState } = useFormContext();\n\n  const fieldState = getFieldState(fieldContext.name, formState);\n\n  if (!fieldContext) {\n    throw new Error('useFormField should be used within <FormField>');\n  }\n\n  const { id } = itemContext;\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  };\n};\n\ntype FormItemContextValue = {\n  id: string;\n};\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue,\n);\n\nconst FormItem: React.FC<React.ComponentPropsWithRef<'div'>> = ({\n  className,\n  ...props\n}) => {\n  const id = React.useId();\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div className={cn('flex flex-col gap-y-2', className)} {...props} />\n    </FormItemContext.Provider>\n  );\n};\nFormItem.displayName = 'FormItem';\n\nconst FormLabel: React.FC<\n  React.ComponentPropsWithRef<typeof LabelPrimitive.Root>\n> = ({ className, ...props }) => {\n  const { error, formItemId } = useFormField();\n\n  return (\n    <Label\n      className={cn(error && 'text-destructive', className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  );\n};\nFormLabel.displayName = 'FormLabel';\n\nconst FormControl: React.FC<React.ComponentPropsWithoutRef<typeof Slot>> = ({\n  ...props\n}) => {\n  const { error, formItemId, formDescriptionId, formMessageId } =\n    useFormField();\n\n  return (\n    <Slot\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  );\n};\nFormControl.displayName = 'FormControl';\n\nconst FormDescription: React.FC<React.ComponentPropsWithRef<'p'>> = ({\n  className,\n  ...props\n}) => {\n  const { formDescriptionId } = useFormField();\n\n  return (\n    <p\n      id={formDescriptionId}\n      className={cn('text-muted-foreground text-[0.8rem]', className)}\n      {...props}\n    />\n  );\n};\nFormDescription.displayName = 'FormDescription';\n\nconst FormMessage: React.FC<React.ComponentPropsWithRef<'p'>> = ({\n  className,\n  children,\n  ...props\n}) => {\n  const { error, formMessageId } = useFormField();\n  const body = error ? String(error?.message) : children;\n\n  if (!body) {\n    return null;\n  }\n\n  return (\n    <p\n      id={formMessageId}\n      className={cn('text-destructive text-[0.8rem] font-medium', className)}\n      {...props}\n    >\n      {typeof body === 'string' ? (\n        <Trans i18nKey={body} defaults={body} />\n      ) : (\n        body\n      )}\n    </p>\n  );\n};\nFormMessage.displayName = 'FormMessage';\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n};\n"]}