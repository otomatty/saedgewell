{"version":3,"sources":["../../src/makerkit/version-updater.tsx"],"names":["useState","useEffect","AlertDialog","AlertDialogContent","AlertDialogHeader","AlertDialogTitle","RocketIcon","Trans","AlertDialogDescription","AlertDialogFooter","Button","useQuery"],"mappings":"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","file":"version-updater.js","sourcesContent":["'use client';\n\nimport { useEffect, useState } from 'react';\n\nimport { useQuery } from '@tanstack/react-query';\nimport { RocketIcon } from 'lucide-react';\n\nimport {\n  AlertDialog,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '../shadcn/alert-dialog';\nimport { Button } from '../shadcn/button';\nimport { Trans } from './trans';\n\n/**\n * Current version of the app that is running\n */\nlet version: string | null = null;\n\n/**\n * Default interval time in seconds to check for new version\n * By default, it is set to 120 seconds\n */\nconst DEFAULT_REFETCH_INTERVAL = 120;\n\n/**\n * Default interval time in seconds to check for new version\n */\nconst VERSION_UPDATER_REFETCH_INTERVAL_SECONDS =\n  process.env.NEXT_PUBLIC_VERSION_UPDATER_REFETCH_INTERVAL_SECONDS;\n\nexport function VersionUpdater(props: { intervalTimeInSecond?: number }) {\n  const { data } = useVersionUpdater(props);\n  const [dismissed, setDismissed] = useState(false);\n  const [showDialog, setShowDialog] = useState<boolean>(false);\n\n  useEffect(() => {\n    setShowDialog(data?.didChange ?? false);\n  }, [data?.didChange]);\n\n  if (!data?.didChange || dismissed) {\n    return null;\n  }\n\n  return (\n    <AlertDialog open={showDialog} onOpenChange={setShowDialog}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle className={'flex items-center gap-x-2'}>\n            <RocketIcon className={'h-4'} />\n            <span>\n              <Trans i18nKey=\"common:newVersionAvailable\" />\n            </span>\n          </AlertDialogTitle>\n\n          <AlertDialogDescription>\n            <Trans i18nKey=\"common:newVersionAvailableDescription\" />\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n\n        <AlertDialogFooter>\n          <Button\n            variant={'outline'}\n            onClick={() => {\n              setShowDialog(false);\n              setDismissed(true);\n            }}\n          >\n            <Trans i18nKey=\"common:back\" />\n          </Button>\n\n          <Button onClick={() => window.location.reload()}>\n            <Trans i18nKey=\"common:newVersionSubmitButton\" />\n          </Button>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n\nfunction useVersionUpdater(props: { intervalTimeInSecond?: number } = {}) {\n  const interval = VERSION_UPDATER_REFETCH_INTERVAL_SECONDS\n    ? Number(VERSION_UPDATER_REFETCH_INTERVAL_SECONDS)\n    : DEFAULT_REFETCH_INTERVAL;\n\n  const refetchInterval = (props.intervalTimeInSecond ?? interval) * 1000;\n\n  // start fetching new version after half of the interval time\n  const staleTime = refetchInterval / 2;\n\n  return useQuery({\n    queryKey: ['version-updater'],\n    staleTime,\n    gcTime: refetchInterval,\n    refetchIntervalInBackground: true,\n    refetchInterval,\n    initialData: null,\n    queryFn: async () => {\n      const response = await fetch('/version');\n      const currentVersion = await response.text();\n      const oldVersion = version;\n\n      version = currentVersion;\n\n      const didChange = oldVersion !== null && currentVersion !== oldVersion;\n\n      return {\n        currentVersion,\n        oldVersion,\n        didChange,\n      };\n    },\n  });\n}\n"]}