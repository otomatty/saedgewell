{"version":3,"sources":["../../src/makerkit/language-selector.tsx"],"names":["useTranslation","useMemo","useState","useCallback","Select","SelectTrigger","SelectValue","SelectContent","SelectItem"],"mappings":";;;;;;;;;AAcO,SAAS,gBAAiB,CAAA;AAAA,EAC/B;AACF,CAEG,EAAA;AACD,EAAM,MAAA,EAAE,IAAK,EAAA,GAAIA,2BAAe,EAAA;AAChC,EAAA,MAAM,EAAE,QAAA,EAAU,eAAiB,EAAA,OAAA,EAAY,GAAA,IAAA;AAE/C,EAAM,MAAA,OAAA,GAAW,QAAQ,aAA2B,CAAA,MAAA;AAAA,IAClD,CAAC,MAAA,KAAW,MAAO,CAAA,WAAA,EAAkB,KAAA;AAAA,GACvC;AAEA,EAAM,MAAA,aAAA,GAAgBC,cAAQ,MAAM;AAClC,IAAA,OAAO,IAAI,IAAA,CAAK,YAAa,CAAA,CAAC,eAAe,CAAG,EAAA;AAAA,MAC9C,IAAM,EAAA;AAAA,KACP,CAAA;AAAA,GACH,EAAG,CAAC,eAAe,CAAC,CAAA;AAEpB,EAAA,MAAM,CAAC,KAAO,EAAA,QAAQ,CAAI,GAAAC,cAAA,CAAS,KAAK,QAAQ,CAAA;AAEhD,EAAA,MAAM,eAAkB,GAAAC,iBAAA;AAAA,IACtB,OAAO,MAAmB,KAAA;AACxB,MAAA,QAAA,CAAS,MAAM,CAAA;AAEf,MAAA,IAAI,QAAU,EAAA;AACZ,QAAA,QAAA,CAAS,MAAM,CAAA;AAAA;AAGjB,MAAM,MAAA,IAAA,CAAK,eAAe,MAAM,CAAA;AAGhC,MAAA,MAAA,CAAO,SAAS,MAAO,EAAA;AAAA,KACzB;AAAA,IACA,CAAC,MAAM,QAAQ;AAAA,GACjB;AAEA,EAAA,2CACGC,uBAAO,EAAA,EAAA,KAAA,EAAc,aAAe,EAAA,eAAA,EAAA,sCAClCC,8BACC,EAAA,IAAA,kBAAA,KAAA,CAAA,aAAA,CAACC,4BAAY,EAAA,IAAA,CACf,mBAEC,KAAA,CAAA,aAAA,CAAAC,8BAAA,EAAA,IAAA,EACE,OAAQ,CAAA,GAAA,CAAI,CAAC,MAAW,KAAA;AAzDjC,IAAA,IAAA,EAAA;AA0DU,IAAA,MAAM,QAAQ,UAAW,CAAA,CAAA,EAAA,GAAA,aAAA,CAAc,GAAG,MAAM,CAAA,KAAvB,YAA4B,MAAM,CAAA;AAE3D,IAAA,MAAM,MAAS,GAAA;AAAA,MACb,KAAO,EAAA,MAAA;AAAA,MACP;AAAA,KACF;AAEA,IACE,uBAAA,KAAA,CAAA,aAAA,CAACC,+BAAW,KAAO,EAAA,MAAA,CAAO,OAAO,GAAK,EAAA,MAAA,CAAO,KAC1C,EAAA,EAAA,MAAA,CAAO,KACV,CAAA;AAAA,GAEH,CACH,CACF,CAAA;AAEJ;AAEA,SAAS,WAAW,IAAc,EAAA;AAChC,EAAO,OAAA,IAAA,CAAK,MAAM,CAAG,EAAA,CAAC,EAAE,WAAY,EAAA,GAAI,IAAK,CAAA,KAAA,CAAM,CAAC,CAAA;AACtD","file":"language-selector.js","sourcesContent":["'use client';\n\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '../shadcn/select';\n\nexport function LanguageSelector({\n  onChange,\n}: {\n  onChange?: (locale: string) => unknown;\n}) {\n  const { i18n } = useTranslation();\n  const { language: currentLanguage, options } = i18n;\n\n  const locales = (options.supportedLngs as string[]).filter(\n    (locale) => locale.toLowerCase() !== 'cimode',\n  );\n\n  const languageNames = useMemo(() => {\n    return new Intl.DisplayNames([currentLanguage], {\n      type: 'language',\n    });\n  }, [currentLanguage]);\n\n  const [value, setValue] = useState(i18n.language);\n\n  const languageChanged = useCallback(\n    async (locale: string) => {\n      setValue(locale);\n\n      if (onChange) {\n        onChange(locale);\n      }\n\n      await i18n.changeLanguage(locale);\n\n      // refresh cached translations\n      window.location.reload();\n    },\n    [i18n, onChange],\n  );\n\n  return (\n    <Select value={value} onValueChange={languageChanged}>\n      <SelectTrigger>\n        <SelectValue />\n      </SelectTrigger>\n\n      <SelectContent>\n        {locales.map((locale) => {\n          const label = capitalize(languageNames.of(locale) ?? locale);\n\n          const option = {\n            value: locale,\n            label,\n          };\n\n          return (\n            <SelectItem value={option.value} key={option.value}>\n              {option.label}\n            </SelectItem>\n          );\n        })}\n      </SelectContent>\n    </Select>\n  );\n}\n\nfunction capitalize(lang: string) {\n  return lang.slice(0, 1).toUpperCase() + lang.slice(1);\n}\n"]}