{"version":3,"sources":["../../src/makerkit/data-table.tsx"],"names":["useState","useReactTable","getCoreRowModel","getSortedRowModel","Table","TableHeader","TableRow","TableHead","flexRender","TableBody","TableCell","Trans","TableFooter","Button","ChevronsLeft","ChevronLeft","ChevronRight","ChevronsRight","useRouter","useCallback"],"mappings":"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","file":"data-table.js","sourcesContent":["'use client';\n\nimport { useCallback, useState } from 'react';\n\nimport { useRouter } from 'next/navigation';\n\nimport {\n  flexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport type {\n  ColumnDef,\n  ColumnFiltersState,\n  PaginationState,\n  Table as ReactTable,\n  Row,\n  SortingState,\n  VisibilityState,\n} from '@tanstack/react-table';\nimport {\n  ChevronLeft,\n  ChevronRight,\n  ChevronsLeft,\n  ChevronsRight,\n} from 'lucide-react';\n\nimport { Button } from '../shadcn/button';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableFooter,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '../shadcn/table';\nimport { Trans } from './trans';\n\ninterface ReactTableProps<T extends object> {\n  data: T[];\n  columns: ColumnDef<T>[];\n  renderSubComponent?: (props: { row: Row<T> }) => React.ReactElement;\n  pageIndex?: number;\n  pageSize?: number;\n  pageCount?: number;\n  onPaginationChange?: (pagination: PaginationState) => void;\n  onSortingChange?: (sorting: SortingState) => void;\n  manualPagination?: boolean;\n  manualSorting?: boolean;\n  sorting?: SortingState;\n  tableProps?: React.ComponentProps<typeof Table> &\n    Record<`data-${string}`, string>;\n}\n\nexport function DataTable<T extends object>({\n  data,\n  columns,\n  pageIndex,\n  pageSize,\n  pageCount,\n  onPaginationChange,\n  onSortingChange,\n  tableProps,\n  manualPagination = true,\n  manualSorting = false,\n  sorting: initialSorting,\n}: ReactTableProps<T>) {\n  const [pagination, setPagination] = useState<PaginationState>({\n    pageIndex: pageIndex ?? 0,\n    pageSize: pageSize ?? 15,\n  });\n\n  const [sorting, setSorting] = useState<SortingState>(initialSorting ?? []);\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);\n  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});\n  const [rowSelection, setRowSelection] = useState({});\n\n  const navigateToPage = useNavigateToNewPage();\n\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    manualPagination,\n    manualSorting,\n    onColumnFiltersChange: setColumnFilters,\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    pageCount,\n    state: {\n      pagination,\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n    },\n    onSortingChange: (updater) => {\n      if (typeof updater === 'function') {\n        const nextState = updater(sorting);\n\n        setSorting(nextState);\n\n        if (onSortingChange) {\n          onSortingChange(nextState);\n        }\n      } else {\n        setSorting(updater);\n\n        if (onSortingChange) {\n          onSortingChange(updater);\n        }\n      }\n    },\n    onPaginationChange: (updater) => {\n      const navigate = (page: number) => setTimeout(() => navigateToPage(page));\n\n      if (typeof updater === 'function') {\n        setPagination((prevState) => {\n          const nextState = updater(prevState);\n\n          if (onPaginationChange) {\n            onPaginationChange(nextState);\n          } else {\n            navigate(nextState.pageIndex);\n          }\n\n          return nextState;\n        });\n      } else {\n        setPagination(updater);\n\n        if (onPaginationChange) {\n          onPaginationChange(updater);\n        } else {\n          navigate(updater.pageIndex);\n        }\n      }\n    },\n  });\n\n  return (\n    <div className={'rounded-lg border'}>\n      <Table {...tableProps}>\n        <TableHeader>\n          {table.getHeaderGroups().map((headerGroup) => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map((header) => (\n                <TableHead\n                  colSpan={header.colSpan}\n                  style={{\n                    width: header.column.getSize(),\n                  }}\n                  key={header.id}\n                >\n                  {header.isPlaceholder\n                    ? null\n                    : flexRender(\n                        header.column.columnDef.header,\n                        header.getContext(),\n                      )}\n                </TableHead>\n              ))}\n            </TableRow>\n          ))}\n        </TableHeader>\n\n        <TableBody>\n          {table.getRowModel().rows?.length ? (\n            table.getRowModel().rows.map((row) => (\n              <TableRow\n                key={row.id}\n                data-state={row.getIsSelected() && 'selected'}\n              >\n                {row.getVisibleCells().map((cell) => (\n                  <TableCell key={cell.id}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))\n          ) : (\n            <TableRow>\n              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                <Trans i18nKey={'common:noData'} />\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n\n        <TableFooter className={'bg-background'}>\n          <TableRow>\n            <TableCell colSpan={columns.length}>\n              <Pagination table={table} />\n            </TableCell>\n          </TableRow>\n        </TableFooter>\n      </Table>\n    </div>\n  );\n}\n\nfunction Pagination<T>({\n  table,\n}: React.PropsWithChildren<{\n  table: ReactTable<T>;\n}>) {\n  return (\n    <div className=\"flex items-center gap-x-4\">\n      <span className=\"text-muted-foreground flex items-center text-sm\">\n        <Trans\n          i18nKey={'common:pageOfPages'}\n          values={{\n            page: table.getState().pagination.pageIndex + 1,\n            total: table.getPageCount(),\n          }}\n        />\n      </span>\n\n      <div className=\"flex items-center gap-x-1\">\n        <Button\n          size={'icon'}\n          variant={'ghost'}\n          onClick={() => table.setPageIndex(0)}\n          disabled={!table.getCanPreviousPage()}\n        >\n          <ChevronsLeft className={'h-4'} />\n        </Button>\n\n        <Button\n          size={'icon'}\n          variant={'ghost'}\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n        >\n          <ChevronLeft className={'h-4'} />\n        </Button>\n\n        <Button\n          size={'icon'}\n          variant={'ghost'}\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n        >\n          <ChevronRight className={'h-4'} />\n        </Button>\n\n        <Button\n          size={'icon'}\n          variant={'ghost'}\n          onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n          disabled={!table.getCanNextPage()}\n        >\n          <ChevronsRight className={'h-4'} />\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Navigates to a new page using the provided page index and optional page parameter.\n */\nfunction useNavigateToNewPage(\n  props: { pageParam?: string } = {\n    pageParam: 'page',\n  },\n) {\n  const router = useRouter();\n  const param = props.pageParam ?? 'page';\n\n  return useCallback(\n    (pageIndex: number) => {\n      const url = new URL(window.location.href);\n      url.searchParams.set(param, String(pageIndex + 1));\n\n      router.push(url.pathname + url.search);\n    },\n    [param, router],\n  );\n}\n"]}