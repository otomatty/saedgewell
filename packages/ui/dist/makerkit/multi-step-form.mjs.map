{"version":3,"sources":["../../src/makerkit/multi-step-form.tsx"],"names":["MultiStepFormStep","isValid","MultiStepFormHeader","MultiStepFormFooter"],"mappings":"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","file":"multi-step-form.mjs","sourcesContent":["'use client';\n\nimport React, {\n  type HTMLProps,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport { Slot, Slottable } from '@radix-ui/react-slot';\nimport { useMutation } from '@tanstack/react-query';\nimport type { Path, UseFormReturn } from 'react-hook-form';\nimport { z } from 'zod';\n\nimport { cn } from '../lib/utils';\n\ninterface MultiStepFormProps<T extends z.ZodType> {\n  schema: T;\n  form: UseFormReturn<z.infer<T>>;\n  onSubmit: (data: z.infer<T>) => void;\n  useStepTransition?: boolean;\n  className?: string;\n}\n\ntype StepProps = React.PropsWithChildren<\n  {\n    name: string;\n    asChild?: boolean;\n  } & React.HTMLProps<HTMLDivElement>\n>;\n\nconst MultiStepFormContext = createContext<ReturnType<\n  typeof useMultiStepForm\n> | null>(null);\n\n/**\n * @name MultiStepForm\n * @description Multi-step form component for React\n * @param schema\n * @param form\n * @param onSubmit\n * @param children\n * @param className\n * @constructor\n */\nexport function MultiStepForm<T extends z.ZodType>({\n  schema,\n  form,\n  onSubmit,\n  children,\n  className,\n}: React.PropsWithChildren<MultiStepFormProps<T>>) {\n  const steps = useMemo(\n    () =>\n      React.Children.toArray(children).filter(\n        (child): child is React.ReactElement<StepProps> =>\n          React.isValidElement(child) && child.type === MultiStepFormStep,\n      ),\n    [children],\n  );\n\n  const header = useMemo(() => {\n    return React.Children.toArray(children).find(\n      (child) =>\n        React.isValidElement(child) && child.type === MultiStepFormHeader,\n    );\n  }, [children]);\n\n  const footer = useMemo(() => {\n    return React.Children.toArray(children).find(\n      (child) =>\n        React.isValidElement(child) && child.type === MultiStepFormFooter,\n    );\n  }, [children]);\n\n  const stepNames = steps.map((step) => step.props.name);\n  const multiStepForm = useMultiStepForm(schema, form, stepNames, onSubmit);\n\n  return (\n    <MultiStepFormContext.Provider value={multiStepForm}>\n      <form\n        onSubmit={form.handleSubmit(onSubmit)}\n        className={cn(className, 'flex size-full flex-col overflow-hidden')}\n      >\n        {header}\n\n        <div className=\"relative transition-transform duration-500\">\n          {steps.map((step, index) => {\n            const isActive = index === multiStepForm.currentStepIndex;\n\n            return (\n              <AnimatedStep\n                key={step.props.name}\n                direction={multiStepForm.direction}\n                isActive={isActive}\n                index={index}\n                currentIndex={multiStepForm.currentStepIndex}\n              >\n                {step}\n              </AnimatedStep>\n            );\n          })}\n        </div>\n\n        {footer}\n      </form>\n    </MultiStepFormContext.Provider>\n  );\n}\n\nexport function MultiStepFormContextProvider(props: {\n  children: (context: ReturnType<typeof useMultiStepForm>) => React.ReactNode;\n}) {\n  const ctx = useMultiStepFormContext();\n\n  if (Array.isArray(props.children)) {\n    const [child] = props.children;\n\n    return (\n      child as (context: ReturnType<typeof useMultiStepForm>) => React.ReactNode\n    )(ctx);\n  }\n\n  return props.children(ctx);\n}\n\nexport const MultiStepFormStep: React.FC<\n  React.PropsWithChildren<\n    {\n      asChild?: boolean;\n      ref?: React.Ref<HTMLDivElement>;\n    } & HTMLProps<HTMLDivElement>\n  >\n> = function MultiStepFormStep({ children, asChild, ...props }) {\n  const Cmp = asChild ? Slot : 'div';\n\n  return (\n    <Cmp {...props}>\n      <Slottable>{children}</Slottable>\n    </Cmp>\n  );\n};\n\nexport function useMultiStepFormContext<Schema extends z.ZodType>() {\n  const context = useContext(MultiStepFormContext) as ReturnType<\n    typeof useMultiStepForm<Schema>\n  >;\n\n  if (!context) {\n    throw new Error(\n      'useMultiStepFormContext must be used within a MultiStepForm',\n    );\n  }\n\n  return context;\n}\n\n/**\n * @name useMultiStepForm\n * @description Hook for multi-step forms\n * @param schema\n * @param form\n * @param stepNames\n * @param onSubmit\n */\nexport function useMultiStepForm<Schema extends z.ZodType>(\n  schema: Schema,\n  form: UseFormReturn<z.infer<Schema>>,\n  stepNames: string[],\n  onSubmit: (data: z.infer<Schema>) => void,\n) {\n  const [state, setState] = useState({\n    currentStepIndex: 0,\n    direction: undefined as 'forward' | 'backward' | undefined,\n  });\n\n  const isStepValid = useCallback(() => {\n    const currentStepName = stepNames[state.currentStepIndex] as Path<\n      z.TypeOf<Schema>\n    >;\n\n    if (schema instanceof z.ZodObject) {\n      const currentStepSchema = schema.shape[currentStepName] as z.ZodType;\n\n      // the user may not want to validate the current step\n      // or the step doesn't contain any form field\n      if (!currentStepSchema) {\n        return true;\n      }\n\n      const currentStepData = form.getValues(currentStepName) ?? {};\n      const result = currentStepSchema.safeParse(currentStepData);\n\n      return result.success;\n    }\n\n    throw new Error(`Unsupported schema type: ${schema.constructor.name}`);\n  }, [schema, form, stepNames, state.currentStepIndex]);\n\n  const nextStep = useCallback(\n    <Ev extends React.SyntheticEvent>(e: Ev) => {\n      // prevent form submission when the user presses Enter\n      // or if the user forgets [type=\"button\"] on the button\n      e.preventDefault();\n\n      const isValid = isStepValid();\n\n      if (!isValid) {\n        const currentStepName = stepNames[state.currentStepIndex] as Path<\n          z.TypeOf<Schema>\n        >;\n\n        if (schema instanceof z.ZodObject) {\n          const currentStepSchema = schema.shape[currentStepName] as z.ZodType;\n\n          if (currentStepSchema) {\n            const fields = Object.keys(\n              (currentStepSchema as z.ZodObject<never>).shape,\n            );\n\n            const keys = fields.map((field) => `${currentStepName}.${field}`);\n\n            // trigger validation for all fields in the current step\n            for (const key of keys) {\n              void form.trigger(key as Path<z.TypeOf<Schema>>);\n            }\n\n            return;\n          }\n        }\n      }\n\n      if (isValid && state.currentStepIndex < stepNames.length - 1) {\n        setState((prevState) => {\n          return {\n            ...prevState,\n            direction: 'forward',\n            currentStepIndex: prevState.currentStepIndex + 1,\n          };\n        });\n      }\n    },\n    [isStepValid, state.currentStepIndex, stepNames, schema, form],\n  );\n\n  const prevStep = useCallback(\n    <Ev extends React.SyntheticEvent>(e: Ev) => {\n      // prevent form submission when the user presses Enter\n      // or if the user forgets [type=\"button\"] on the button\n      e.preventDefault();\n\n      if (state.currentStepIndex > 0) {\n        setState((prevState) => {\n          return {\n            ...prevState,\n            direction: 'backward',\n            currentStepIndex: prevState.currentStepIndex - 1,\n          };\n        });\n      }\n    },\n    [state.currentStepIndex],\n  );\n\n  const goToStep = useCallback(\n    (index: number) => {\n      if (index >= 0 && index < stepNames.length && isStepValid()) {\n        setState((prevState) => {\n          return {\n            ...prevState,\n            direction:\n              index > prevState.currentStepIndex ? 'forward' : 'backward',\n            currentStepIndex: index,\n          };\n        });\n      }\n    },\n    [isStepValid, stepNames.length],\n  );\n\n  const isValid = form.formState.isValid;\n  const errors = form.formState.errors;\n\n  const mutation = useMutation({\n    mutationFn: () => {\n      return form.handleSubmit(onSubmit)();\n    },\n  });\n\n  return useMemo(\n    () => ({\n      form,\n      currentStep: stepNames[state.currentStepIndex] as string,\n      currentStepIndex: state.currentStepIndex,\n      totalSteps: stepNames.length,\n      isFirstStep: state.currentStepIndex === 0,\n      isLastStep: state.currentStepIndex === stepNames.length - 1,\n      nextStep,\n      prevStep,\n      goToStep,\n      direction: state.direction,\n      isStepValid,\n      isValid,\n      errors,\n      mutation,\n    }),\n    [\n      form,\n      mutation,\n      stepNames,\n      state.currentStepIndex,\n      state.direction,\n      nextStep,\n      prevStep,\n      goToStep,\n      isStepValid,\n      isValid,\n      errors,\n    ],\n  );\n}\n\nexport const MultiStepFormHeader: React.FC<\n  React.PropsWithChildren<\n    {\n      asChild?: boolean;\n    } & HTMLProps<HTMLDivElement>\n  >\n> = function MultiStepFormHeader({ children, asChild, ...props }) {\n  const Cmp = asChild ? Slot : 'div';\n\n  return (\n    <Cmp {...props}>\n      <Slottable>{children}</Slottable>\n    </Cmp>\n  );\n};\n\nexport const MultiStepFormFooter: React.FC<\n  React.PropsWithChildren<\n    {\n      asChild?: boolean;\n    } & HTMLProps<HTMLDivElement>\n  >\n> = function MultiStepFormFooter({ children, asChild, ...props }) {\n  const Cmp = asChild ? Slot : 'div';\n\n  return (\n    <Cmp {...props}>\n      <Slottable>{children}</Slottable>\n    </Cmp>\n  );\n};\n\n/**\n * @name createStepSchema\n * @description Create a schema for a multi-step form\n * @param steps\n */\nexport function createStepSchema<T extends Record<string, z.ZodType>>(\n  steps: T,\n) {\n  return z.object(steps);\n}\n\ninterface AnimatedStepProps {\n  direction: 'forward' | 'backward' | undefined;\n  isActive: boolean;\n  index: number;\n  currentIndex: number;\n}\n\nfunction AnimatedStep({\n  isActive,\n  direction,\n  children,\n  index,\n  currentIndex,\n}: React.PropsWithChildren<AnimatedStepProps>) {\n  const [shouldRender, setShouldRender] = useState(isActive);\n  const stepRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (isActive) {\n      setShouldRender(true);\n    } else {\n      const timer = setTimeout(() => setShouldRender(false), 300);\n\n      return () => clearTimeout(timer);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (isActive && stepRef.current) {\n      const focusableElement = stepRef.current.querySelector(\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])',\n      );\n\n      if (focusableElement) {\n        (focusableElement as HTMLElement).focus();\n      }\n    }\n  }, [isActive]);\n\n  if (!shouldRender) {\n    return null;\n  }\n\n  const baseClasses =\n    ' top-0 left-0 w-full h-full transition-all duration-300 ease-in-out animate-in fade-in zoom-in-95';\n\n  const visibilityClasses = isActive ? 'opacity-100' : 'opacity-0 absolute';\n\n  const transformClasses = cn(\n    'translate-x-0',\n    isActive\n      ? {}\n      : {\n          '-translate-x-full': direction === 'forward' || index < currentIndex,\n          'translate-x-full': direction === 'backward' || index > currentIndex,\n        },\n  );\n\n  const className = cn(baseClasses, visibilityClasses, transformClasses);\n\n  return (\n    <div ref={stepRef} className={className} aria-hidden={!isActive}>\n      {children}\n    </div>\n  );\n}\n"]}