{"version":3,"sources":["../../src/makerkit/top-loading-bar-indicator.tsx","../../src/makerkit/global-loader.tsx"],"names":["createRef","useEffect","LoadingBar","If","LoadingOverlay"],"mappings":";;;;;;;;;;;;;;AAOA,IAAI,OAAU,GAAA,KAAA;AAEP,SAAS,sBAAyB,GAAA;AACvC,EAAA,MAAM,MAAMA,eAAyB,EAAA;AAErC,EAAAC,eAAA,CAAU,MAAM;AACd,IAAI,IAAA,CAAC,GAAI,CAAA,OAAA,IAAW,OAAS,EAAA;AAC3B,MAAA;AAAA;AAGF,IAAU,OAAA,GAAA,IAAA;AAEV,IAAA,MAAM,gBAAgB,GAAI,CAAA,OAAA;AAE1B,IAAc,aAAA,CAAA,eAAA,CAAgB,GAAG,GAAG,CAAA;AAEpC,IAAA,OAAO,MAAM;AACX,MAAA,aAAA,CAAc,QAAS,EAAA;AACvB,MAAU,OAAA,GAAA,KAAA;AAAA,KACZ;AAAA,GACF,EAAG,CAAC,GAAG,CAAC,CAAA;AAER,EACE,uBAAA,KAAA,CAAA,aAAA;AAAA,IAACC,2BAAA;AAAA,IAAA;AAAA,MACC,SAAW,EAAA,YAAA;AAAA,MACX,MAAQ,EAAA,CAAA;AAAA,MACR,WAAa,EAAA,CAAA;AAAA,MACb,MAAM,EAAA,IAAA;AAAA,MACN,KAAO,EAAA,EAAA;AAAA,MACP;AAAA;AAAA,GACF;AAEJ;;;ACnCO,SAAS,YAAa,CAAA;AAAA,EAC3B,WAAc,GAAA,KAAA;AAAA,EACd,QAAW,GAAA,KAAA;AAAA,EACX,cAAiB,GAAA,IAAA;AAAA,EACjB,oBAAuB,GAAA,IAAA;AAAA,EACvB;AACF,CAKI,EAAA;AACF,EAAA,uBAEI,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,kBAAA,KAAA,CAAA,aAAA,CAACC,mBAAG,EAAA,EAAA,SAAA,EAAW,oBACb,EAAA,kBAAA,KAAA,CAAA,aAAA,CAAC,sBAAuB,EAAA,IAAA,CAC1B,CAEA,kBAAA,KAAA,CAAA,aAAA,CAACA,mBAAG,EAAA,EAAA,SAAA,EAAW,cACb,EAAA,kBAAA,KAAA,CAAA,aAAA;AAAA,IAAC,KAAA;AAAA,IAAA;AAAA,MACC,SACE,EAAA;AAAA,KAAA;AAAA,oBAGF,KAAA,CAAA,aAAA,CAACC,+BAAe,EAAA,EAAA,WAAA,EAA0B,QAAoB,EAAA,CAAA;AAAA,IAE7D;AAAA,GAEL,CACF,CAAA;AAEJ","file":"global-loader.js","sourcesContent":["'use client';\n\nimport { createRef, useEffect } from 'react';\n\nimport type { LoadingBarRef } from 'react-top-loading-bar';\nimport LoadingBar from 'react-top-loading-bar';\n\nlet running = false;\n\nexport function TopLoadingBarIndicator() {\n  const ref = createRef<LoadingBarRef>();\n\n  useEffect(() => {\n    if (!ref.current || running) {\n      return;\n    }\n\n    running = true;\n\n    const loadingBarRef = ref.current;\n\n    loadingBarRef.continuousStart(0, 300);\n\n    return () => {\n      loadingBarRef.complete();\n      running = false;\n    };\n  }, [ref]);\n\n  return (\n    <LoadingBar\n      className={'bg-primary'}\n      height={4}\n      waitingTime={0}\n      shadow\n      color={''}\n      ref={ref}\n    />\n  );\n}\n","import { If } from './if';\nimport { LoadingOverlay } from './loading-overlay';\nimport { TopLoadingBarIndicator } from './top-loading-bar-indicator';\n\nexport function GlobalLoader({\n  displayLogo = false,\n  fullPage = false,\n  displaySpinner = true,\n  displayTopLoadingBar = true,\n  children,\n}: React.PropsWithChildren<{\n  displayLogo?: boolean;\n  fullPage?: boolean;\n  displaySpinner?: boolean;\n  displayTopLoadingBar?: boolean;\n}>) {\n  return (\n    <>\n      <If condition={displayTopLoadingBar}>\n        <TopLoadingBarIndicator />\n      </If>\n\n      <If condition={displaySpinner}>\n        <div\n          className={\n            'zoom-in-80 animate-in fade-in slide-in-from-bottom-12 flex flex-1 flex-col items-center justify-center duration-500'\n          }\n        >\n          <LoadingOverlay displayLogo={displayLogo} fullPage={fullPage} />\n\n          {children}\n        </div>\n      </If>\n    </>\n  );\n}\n"]}