{"version":3,"sources":["../../src/makerkit/mode-toggle.tsx"],"names":[],"mappings":"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","file":"mode-toggle.mjs","sourcesContent":["'use client';\n\nimport { useMemo } from 'react';\n\nimport { Computer, Moon, Sun } from 'lucide-react';\nimport { useTheme } from 'next-themes';\n\nimport { cn } from '../lib/utils';\nimport { Button } from '../shadcn/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from '../shadcn/dropdown-menu';\nimport { Trans } from './trans';\n\nconst MODES = ['light', 'dark', 'system'];\n\nexport function ModeToggle(props: { className?: string }) {\n  const { setTheme, theme } = useTheme();\n\n  const Items = useMemo(() => {\n    return MODES.map((mode) => {\n      const isSelected = theme === mode;\n\n      return (\n        <DropdownMenuItem\n          className={cn('space-x-2', {\n            'bg-muted': isSelected,\n          })}\n          key={mode}\n          onClick={() => {\n            setTheme(mode);\n            setCookeTheme(mode);\n          }}\n        >\n          <Icon theme={mode} />\n\n          <span>\n            <Trans i18nKey={`common:${mode}Theme`} />\n          </span>\n        </DropdownMenuItem>\n      );\n    });\n  }, [setTheme, theme]);\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\" className={props.className}>\n          <Sun className=\"h-[0.9rem] w-[0.9rem] scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90\" />\n          <Moon className=\"absolute h-[0.9rem] w-[0.9rem] scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0\" />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n\n      <DropdownMenuContent align=\"end\">{Items}</DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n\nexport function SubMenuModeToggle() {\n  const { setTheme, theme, resolvedTheme } = useTheme();\n\n  const MenuItems = useMemo(\n    () =>\n      MODES.map((mode) => {\n        const isSelected = theme === mode;\n\n        return (\n          <DropdownMenuItem\n            className={cn('flex cursor-pointer items-center space-x-2', {\n              'bg-muted': isSelected,\n            })}\n            key={mode}\n            onClick={() => {\n              setTheme(mode);\n              setCookeTheme(mode);\n            }}\n          >\n            <Icon theme={mode} />\n\n            <span>\n              <Trans i18nKey={`common:${mode}Theme`} />\n            </span>\n          </DropdownMenuItem>\n        );\n      }),\n    [setTheme, theme],\n  );\n\n  return (\n    <>\n      <DropdownMenuSub>\n        <DropdownMenuSubTrigger\n          className={\n            'hidden w-full items-center justify-between gap-x-3 lg:flex'\n          }\n        >\n          <span className={'flex space-x-2'}>\n            <Icon theme={resolvedTheme} />\n\n            <span>\n              <Trans i18nKey={'common:theme'} />\n            </span>\n          </span>\n        </DropdownMenuSubTrigger>\n\n        <DropdownMenuSubContent>{MenuItems}</DropdownMenuSubContent>\n      </DropdownMenuSub>\n\n      <div className={'lg:hidden'}>\n        <DropdownMenuLabel>\n          <Trans i18nKey={'common:theme'} />\n        </DropdownMenuLabel>\n\n        {MenuItems}\n      </div>\n    </>\n  );\n}\n\nfunction setCookeTheme(theme: string) {\n  document.cookie = `theme=${theme}; path=/; max-age=31536000`;\n}\n\nfunction Icon({ theme }: { theme: string | undefined }) {\n  switch (theme) {\n    case 'light':\n      return <Sun className=\"h-4\" />;\n    case 'dark':\n      return <Moon className=\"h-4\" />;\n    case 'system':\n      return <Computer className=\"h-4\" />;\n  }\n}\n"]}