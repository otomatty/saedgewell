{"version":3,"sources":["../../src/makerkit/context/sidebar.context.ts","../../src/makerkit/sidebar.tsx"],"names":["createContext","useState","useRef","cn","useContext","useId","If","ChevronDown","usePathname","isRouteActive","TooltipProvider","Tooltip","TooltipTrigger","Button","Link","TooltipContent","cva","Trans"],"mappings":"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","file":"sidebar.js","sourcesContent":["import { createContext } from 'react';\n\nconst SidebarContext = createContext<{\n  collapsed: boolean;\n  setCollapsed: (collapsed: boolean) => void;\n}>({\n  collapsed: false,\n  setCollapsed: (_) => _,\n});\n\nexport { SidebarContext };\n","'use client';\n\nimport { useContext, useId, useRef, useState } from 'react';\n\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\n\nimport { cva } from 'class-variance-authority';\nimport { ChevronDown } from 'lucide-react';\nimport type { z } from 'zod';\n\nimport { cn, isRouteActive } from '../lib/utils';\nimport { Button } from '../shadcn/button';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '../shadcn/tooltip';\nimport { SidebarContext } from './context/sidebar.context';\nimport { If } from './if';\nimport type { NavigationConfigSchema } from './navigation-config.schema';\nimport { Trans } from './trans';\n\nexport type SidebarConfig = z.infer<typeof NavigationConfigSchema>;\n\nexport { SidebarContext };\n\n/**\n * @deprecated\n * This component is deprecated and will be removed in a future version.\n * Please use the Shadcn Sidebar component instead.\n */\nexport function Sidebar(props: {\n  collapsed?: boolean;\n  expandOnHover?: boolean;\n  className?: string;\n  children:\n    | React.ReactNode\n    | ((props: {\n        collapsed: boolean;\n        setCollapsed: (collapsed: boolean) => void;\n      }) => React.ReactNode);\n}) {\n  const [collapsed, setCollapsed] = useState(props.collapsed ?? false);\n  const isExpandedRef = useRef<boolean>(false);\n\n  const expandOnHover =\n    props.expandOnHover ??\n    process.env.NEXT_PUBLIC_EXPAND_SIDEBAR_ON_HOVER === 'true';\n\n  const sidebarSizeClassName = getSidebarSizeClassName(\n    collapsed,\n    isExpandedRef.current\n  );\n\n  const className = getClassNameBuilder(\n    cn(props.className ?? '', sidebarSizeClassName, {})\n  )();\n\n  const containerClassName = cn(sidebarSizeClassName, 'bg-inherit', {\n    'max-w-[4rem]': expandOnHover && isExpandedRef.current,\n  });\n\n  const ctx = { collapsed, setCollapsed };\n\n  const onMouseEnter =\n    props.collapsed && expandOnHover\n      ? () => {\n          setCollapsed(false);\n          isExpandedRef.current = true;\n        }\n      : undefined;\n\n  const onMouseLeave =\n    props.collapsed && expandOnHover\n      ? () => {\n          if (!isRadixPopupOpen()) {\n            setCollapsed(true);\n            isExpandedRef.current = false;\n          } else {\n            onRadixPopupClose(() => {\n              setCollapsed(true);\n              isExpandedRef.current = false;\n            });\n          }\n        }\n      : undefined;\n\n  return (\n    <SidebarContext.Provider value={ctx}>\n      <div\n        className={containerClassName}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n      >\n        <div aria-expanded={!collapsed} className={className}>\n          {typeof props.children === 'function'\n            ? props.children(ctx)\n            : props.children}\n        </div>\n      </div>\n    </SidebarContext.Provider>\n  );\n}\n\nexport function SidebarContent({\n  children,\n  className: customClassName,\n}: React.PropsWithChildren<{\n  className?: string;\n}>) {\n  const { collapsed } = useContext(SidebarContext);\n\n  const className = cn(\n    'flex w-full flex-col space-y-1.5 py-1',\n    customClassName,\n    {\n      'px-4': !collapsed,\n      'px-2': collapsed,\n    }\n  );\n\n  return <div className={className}>{children}</div>;\n}\n\nexport function SidebarGroup({\n  label,\n  collapsed = false,\n  collapsible = true,\n  children,\n}: React.PropsWithChildren<{\n  label: string | React.ReactNode;\n  collapsible?: boolean;\n  collapsed?: boolean;\n}>) {\n  const { collapsed: sidebarCollapsed } = useContext(SidebarContext);\n  const [isGroupCollapsed, setIsGroupCollapsed] = useState(collapsed);\n  const id = useId();\n\n  const Title = (props: React.PropsWithChildren) => {\n    if (sidebarCollapsed) {\n      return null;\n    }\n\n    return (\n      <span className={'text-muted-foreground text-xs font-semibold uppercase'}>\n        {props.children}\n      </span>\n    );\n  };\n\n  const Wrapper = () => {\n    const className = cn(\n      'px-container group flex items-center justify-between space-x-2.5',\n      {\n        'py-2.5': !sidebarCollapsed,\n      }\n    );\n\n    if (collapsible) {\n      return (\n        <button\n          type=\"button\"\n          aria-expanded={!isGroupCollapsed}\n          aria-controls={id}\n          onClick={() => setIsGroupCollapsed(!isGroupCollapsed)}\n          className={className}\n        >\n          <Title>{label}</Title>\n\n          <If condition={collapsible}>\n            <ChevronDown\n              className={cn('h-3 transition duration-300', {\n                'rotate-180': !isGroupCollapsed,\n              })}\n            />\n          </If>\n        </button>\n      );\n    }\n\n    return (\n      <div className={className}>\n        <Title>{label}</Title>\n      </div>\n    );\n  };\n\n  return (\n    <div\n      className={cn('flex flex-col', {\n        'gap-y-2 py-1': !collapsed,\n      })}\n    >\n      <Wrapper />\n\n      <If condition={collapsible ? !isGroupCollapsed : true}>\n        <div id={id} className={'flex flex-col space-y-1.5'}>\n          {children}\n        </div>\n      </If>\n    </div>\n  );\n}\n\nexport function SidebarDivider() {\n  return (\n    <div className={'dark:border-dark-800 my-2 border-t border-gray-100'} />\n  );\n}\n\nexport function SidebarItem({\n  end,\n  path,\n  children,\n  Icon,\n}: React.PropsWithChildren<{\n  path: string;\n  Icon: React.ReactNode;\n  end?: boolean | ((path: string) => boolean);\n}>) {\n  const { collapsed } = useContext(SidebarContext);\n  const currentPath = usePathname() ?? '';\n\n  const active = isRouteActive(path, currentPath, end ?? false);\n  const variant = active ? 'secondary' : 'ghost';\n\n  return (\n    <TooltipProvider delayDuration={0}>\n      <Tooltip disableHoverableContent>\n        <TooltipTrigger asChild>\n          <Button\n            asChild\n            className={cn(\n              'active:bg-secondary/60 flex w-full text-sm shadow-none',\n              {\n                'justify-start space-x-2.5': !collapsed,\n                'hover:bg-initial': active,\n              }\n            )}\n            size={'sm'}\n            variant={variant}\n          >\n            <Link href={path}>\n              {Icon}\n              <span\n                className={cn('w-auto transition-opacity duration-300', {\n                  'w-0 opacity-0': collapsed,\n                })}\n              >\n                {children}\n              </span>\n            </Link>\n          </Button>\n        </TooltipTrigger>\n\n        <If condition={collapsed}>\n          <TooltipContent side={'right'} sideOffset={10}>\n            {children}\n          </TooltipContent>\n        </If>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}\n\nfunction getClassNameBuilder(className: string) {\n  return cva([\n    cn(\n      'group/sidebar transition-width fixed box-content flex h-screen w-2/12 flex-col bg-inherit backdrop-blur-xs duration-200',\n      className\n    ),\n  ]);\n}\n\nfunction getSidebarSizeClassName(collapsed: boolean, isExpanded: boolean) {\n  return cn(['z-50 flex w-full flex-col'], {\n    'dark:shadow-primary/20 lg:w-[17rem]': !collapsed,\n    'lg:w-[4rem]': collapsed,\n    shadow: isExpanded,\n  });\n}\n\nfunction getRadixPopup() {\n  return document.querySelector('[data-radix-popper-content-wrapper]');\n}\n\nfunction isRadixPopupOpen() {\n  return getRadixPopup() !== null;\n}\n\nfunction onRadixPopupClose(callback: () => void) {\n  const element = getRadixPopup();\n\n  if (element) {\n    const observer = new MutationObserver(() => {\n      if (!getRadixPopup()) {\n        callback();\n\n        if (element.parentElement) {\n          observer.disconnect();\n        }\n      }\n    });\n\n    if (element.parentElement) {\n      observer.observe(element.parentElement, {\n        childList: true,\n        subtree: true,\n      });\n    }\n  }\n}\n\nexport function SidebarNavigation({\n  config,\n}: React.PropsWithChildren<{\n  config: SidebarConfig;\n}>) {\n  return (\n    <>\n      {config.routes.map((item) => {\n        if ('divider' in item) {\n          return <SidebarDivider key={crypto.randomUUID()} />;\n        }\n\n        if ('children' in item) {\n          return (\n            <SidebarGroup\n              key={item.label}\n              label={<Trans i18nKey={item.label} defaults={item.label} />}\n              collapsible={item.collapsible}\n              collapsed={item.collapsed}\n            >\n              {item.children.map((child) => {\n                if ('collapsible' in child && child.collapsible) {\n                  throw new Error(\n                    'Collapsible groups are not supported in the old Sidebar. Please migrate to the new Sidebar.'\n                  );\n                }\n\n                if ('path' in child) {\n                  return (\n                    <SidebarItem\n                      key={child.path}\n                      end={child.end}\n                      path={child.path}\n                      Icon={child.Icon}\n                    >\n                      <Trans i18nKey={child.label} defaults={child.label} />\n                    </SidebarItem>\n                  );\n                }\n              })}\n            </SidebarGroup>\n          );\n        }\n      })}\n    </>\n  );\n}\n"]}