{"version":3,"sources":["../../src/makerkit/app-breadcrumbs.tsx"],"names":["usePathname","BreadcrumbItem","BreadcrumbEllipsis","Breadcrumb","BreadcrumbList","Trans","Fragment","If","BreadcrumbLink","BreadcrumbSeparator"],"mappings":";;;;;;;;;;;AAiBA,IAAM,YAAY,CAAC,IAAA,KAAiB,IAAK,CAAA,OAAA,CAAQ,MAAM,GAAG,CAAA;AAEnD,SAAS,eAAe,KAG5B,EAAA;AAtBH,EAAA,IAAA,EAAA,EAAA,EAAA;AAuBE,EAAA,MAAM,WAAWA,sBAAY,EAAA;AAC7B,EAAA,MAAM,YAAY,QAAS,CAAA,KAAA,CAAM,GAAG,CAAA,CAAE,OAAO,OAAO,CAAA;AACpD,EAAA,MAAM,MAAS,GAAA,CAAA,EAAA,GAAA,KAAA,CAAM,MAAN,KAAA,IAAA,GAAA,EAAA,GAAgB,EAAC;AAChC,EAAM,MAAA,QAAA,GAAA,CAAW,EAAM,GAAA,KAAA,CAAA,QAAA,KAAN,IAAkB,GAAA,EAAA,GAAA,CAAA;AAEnC,EAAA,MAAM,2BACH,KAAA,CAAA,aAAA,CAAAC,+BAAA,EAAA,IAAA,sCACEC,mCAAmB,EAAA,EAAA,SAAA,EAAU,WAAU,CAC1C,CAAA;AAGF,EAAM,MAAA,YAAA,GAAe,UAAU,MAAS,GAAA,QAAA;AAExC,EAAA,MAAM,YAAe,GAAA,YAAA,GAChB,CAAC,SAAA,CAAU,CAAC,CAAA,EAAG,GAAG,SAAA,CAAU,KAAM,CAAA,CAAC,QAAW,GAAA,CAAC,CAAC,CACjD,GAAA,SAAA;AAEJ,EACE,uBAAA,KAAA,CAAA,aAAA,CAACC,mDACE,KAAA,CAAA,aAAA,CAAAC,+BAAA,EAAA,IAAA,EACE,aAAa,GAAI,CAAA,CAAC,MAAM,KAAU,KAAA;AACjC,IAAA,MAAM,KACJ,GAAA,IAAA,IAAQ,MACN,GAAA,MAAA,CAAO,IAAI,CAEX,mBAAA,KAAA,CAAA,aAAA;AAAA,MAACC,sBAAA;AAAA,MAAA;AAAA,QACC,OAAS,EAAA,CAAA,cAAA,EAAiB,SAAU,CAAA,IAAI,CAAC,CAAA,CAAA;AAAA,QACzC,QAAA,EAAU,UAAU,IAAI;AAAA;AAAA,KAC1B;AAGJ,IAAA,2CACGC,cAAS,EAAA,EAAA,GAAA,EAAK,wBACZ,KAAA,CAAA,aAAA,CAAAL,+BAAA,EAAA,EAAe,WAAW,uBACzB,EAAA,kBAAA,KAAA,CAAA,aAAA;AAAA,MAACM,mBAAA;AAAA,MAAA;AAAA,QACC,SAAA,EAAW,KAAQ,GAAA,YAAA,CAAa,MAAS,GAAA,CAAA;AAAA,QACzC,QAAU,EAAA;AAAA,OAAA;AAAA,sBAEV,KAAA,CAAA,aAAA;AAAA,QAACC,+BAAA;AAAA,QAAA;AAAA,UACC,IAAM,EAAA,CAAA,CAAA,EAAI,SAAU,CAAA,KAAA,CAAM,CAAG,EAAA,SAAA,CAAU,OAAQ,CAAA,IAAI,CAAI,GAAA,CAAC,CAAE,CAAA,IAAA,CAAK,GAAG,CAAC,CAAA;AAAA,SAAA;AAAA,QAElE;AAAA;AACH,KAEJ,GAEC,KAAU,KAAA,CAAA,IAAK,gCAEZ,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,kBAAA,KAAA,CAAA,aAAA,CAACC,0CAAoB,CACpB,EAAA,QACH,mBAGD,KAAA,CAAA,aAAA,CAAAF,mBAAA,EAAA,EAAG,WAAW,KAAU,KAAA,YAAA,CAAa,SAAS,CAC7C,EAAA,kBAAA,KAAA,CAAA,aAAA,CAACE,oCAAoB,EAAA,IAAA,CACvB,CACF,CAAA;AAAA,GAEH,CACH,CACF,CAAA;AAEJ","file":"app-breadcrumbs.js","sourcesContent":["'use client';\n\nimport { Fragment } from 'react';\n\nimport { usePathname } from 'next/navigation';\n\nimport {\n  Breadcrumb,\n  BreadcrumbEllipsis,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbSeparator,\n} from '../shadcn/breadcrumb';\nimport { If } from './if';\nimport { Trans } from './trans';\n\nconst unslugify = (slug: string) => slug.replace(/-/g, ' ');\n\nexport function AppBreadcrumbs(props: {\n  values?: Record<string, string>;\n  maxDepth?: number;\n}) {\n  const pathName = usePathname();\n  const splitPath = pathName.split('/').filter(Boolean);\n  const values = props.values ?? {};\n  const maxDepth = props.maxDepth ?? 6;\n\n  const Ellipsis = (\n    <BreadcrumbItem>\n      <BreadcrumbEllipsis className=\"h-4 w-4\" />\n    </BreadcrumbItem>\n  );\n\n  const showEllipsis = splitPath.length > maxDepth;\n\n  const visiblePaths = showEllipsis\n    ? ([splitPath[0], ...splitPath.slice(-maxDepth + 1)] as string[])\n    : splitPath;\n\n  return (\n    <Breadcrumb>\n      <BreadcrumbList>\n        {visiblePaths.map((path, index) => {\n          const label =\n            path in values ? (\n              values[path]\n            ) : (\n              <Trans\n                i18nKey={`common:routes.${unslugify(path)}`}\n                defaults={unslugify(path)}\n              />\n            );\n\n          return (\n            <Fragment key={path}>\n              <BreadcrumbItem className={'capitalize lg:text-xs'}>\n                <If\n                  condition={index < visiblePaths.length - 1}\n                  fallback={label}\n                >\n                  <BreadcrumbLink\n                    href={`/${splitPath.slice(0, splitPath.indexOf(path) + 1).join('/')}`}\n                  >\n                    {label}\n                  </BreadcrumbLink>\n                </If>\n              </BreadcrumbItem>\n\n              {index === 0 && showEllipsis && (\n                <>\n                  <BreadcrumbSeparator />\n                  {Ellipsis}\n                </>\n              )}\n\n              <If condition={index !== visiblePaths.length - 1}>\n                <BreadcrumbSeparator />\n              </If>\n            </Fragment>\n          );\n        })}\n      </BreadcrumbList>\n    </Breadcrumb>\n  );\n}\n"]}