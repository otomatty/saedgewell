{"version":3,"sources":["../../src/clients/server-client.ts"],"names":[],"mappings":";;;;;;AAaO,SAAS,uBAAoD,GAAA;AAClE,EAAA,MAAM,OAAO,qBAAsB,EAAA;AAEnC,EAAA,OAAO,kBAAkC,CAAA,IAAA,CAAK,GAAK,EAAA,IAAA,CAAK,OAAS,EAAA;AAAA,IAC/D,OAAS,EAAA;AAAA,MACP,MAAM,MAAS,GAAA;AACb,QAAM,MAAA,WAAA,GAAc,MAAM,OAAQ,EAAA;AAElC,QAAA,OAAO,YAAY,MAAO,EAAA;AAAA,OAC5B;AAAA,MACA,MAAM,OAAO,YAAc,EAAA;AACzB,QAAM,MAAA,WAAA,GAAc,MAAM,OAAQ,EAAA;AAElC,QAAI,IAAA;AACF,UAAA,KAAA,MAAW,EAAE,IAAA,EAAM,KAAO,EAAA,OAAA,MAAa,YAAc,EAAA;AACnD,YAAY,WAAA,CAAA,GAAA,CAAI,IAAM,EAAA,KAAA,EAAO,OAAO,CAAA;AAAA;AACtC,SACM,CAAA,OAAA,CAAA,EAAA;AAAA;AAIR;AACF;AACF,GACD,CAAA;AACH","file":"server-client.mjs","sourcesContent":["import 'server-only';\n\nimport { cookies } from 'next/headers';\n\nimport { createServerClient } from '@supabase/ssr';\n\nimport type { Database } from '../database.types';\nimport { getSupabaseClientKeys } from '../get-supabase-client-keys';\n\n/**\n * @name getSupabaseServerClient\n * @description Creates a Supabase client for use in the Server.\n */\nexport function getSupabaseServerClient<GenericSchema = Database>() {\n  const keys = getSupabaseClientKeys();\n\n  return createServerClient<GenericSchema>(keys.url, keys.anonKey, {\n    cookies: {\n      async getAll() {\n        const cookieStore = await cookies();\n\n        return cookieStore.getAll();\n      },\n      async setAll(cookiesToSet) {\n        const cookieStore = await cookies();\n\n        try {\n          for (const { name, value, options } of cookiesToSet) {\n            cookieStore.set(name, value, options);\n          }\n        } catch {\n          // The `setAll` method was called from a Server Component.\n          // This can be ignored if you have middleware refreshing\n          // user sessions.\n        }\n      },\n    },\n  });\n}\n"]}