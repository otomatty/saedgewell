{"version":3,"sources":["../src/auth-callback.service.ts"],"names":["error"],"mappings":"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","file":"auth.mjs","sourcesContent":["import 'server-only';\n\nimport type {\n  AuthError,\n  EmailOtpType,\n  SupabaseClient,\n} from '@supabase/supabase-js';\n\n/**\n * @name createAuthCallbackService\n * @description Creates an instance of the AuthCallbackService\n * @param client\n */\nexport function createAuthCallbackService(client: SupabaseClient) {\n  return new AuthCallbackService(client);\n}\n\n/**\n * @name AuthCallbackService\n * @description Service for handling auth callbacks in Supabase\n *\n * This service handles a variety of situations and edge cases in Supabase Auth.\n *\n */\nclass AuthCallbackService {\n  constructor(private readonly client: SupabaseClient) {}\n\n  /**\n   * @name verifyTokenHash\n   * @description Verifies the token hash and type and redirects the user to the next page\n   * This should be used when using a token hash to verify the user's email\n   * @param request\n   * @param params\n   */\n  async verifyTokenHash(\n    request: Request,\n    params: {\n      redirectPath: string;\n      errorPath?: string;\n    }\n  ): Promise<URL> {\n    const url = new URL(request.url);\n    const searchParams = url.searchParams;\n\n    const host = request.headers.get('host');\n\n    // set the host to the request host since outside of Vercel it gets set as \"localhost\"\n    if (url.host.includes('localhost:') && !host?.includes('localhost')) {\n      url.host = host as string;\n      url.port = '';\n    }\n\n    url.pathname = params.redirectPath;\n\n    const token_hash = searchParams.get('token_hash');\n    const type = searchParams.get('type') as EmailOtpType | null;\n    const callbackParam =\n      searchParams.get('next') ?? searchParams.get('callback');\n\n    let nextPath: string | null = null;\n    const callbackUrl = callbackParam ? new URL(callbackParam) : null;\n\n    // if we have a callback url, we check if it has a next path\n    if (callbackUrl) {\n      // if we have a callback url, we check if it has a next path\n      const callbackNextPath = callbackUrl.searchParams.get('next');\n\n      // if we have a next path in the callback url, we use that\n      if (callbackNextPath) {\n        nextPath = callbackNextPath;\n      } else {\n        nextPath = callbackUrl.pathname;\n      }\n    }\n\n    const errorPath = params.errorPath ?? '/auth/callback/error';\n\n    // remove the query params from the url\n    searchParams.delete('token_hash');\n    searchParams.delete('type');\n    searchParams.delete('next');\n\n    // if we have a next path, we redirect to that path\n    if (nextPath) {\n      url.pathname = nextPath;\n    }\n\n    if (token_hash && type) {\n      const { error } = await this.client.auth.verifyOtp({\n        type,\n        token_hash,\n      });\n\n      if (!error) {\n        return url;\n      }\n\n      if (error.code) {\n        url.searchParams.set('code', error.code);\n      }\n\n      const errorMessage = getAuthErrorMessage({\n        error: error.message,\n        code: error.code,\n      });\n\n      url.searchParams.set('error', errorMessage);\n    }\n\n    // return the user to an error page with some instructions\n    url.pathname = errorPath;\n\n    return url;\n  }\n\n  /**\n   * @name exchangeCodeForSession\n   * @description Exchanges the auth code for a session and redirects the user to the next page or an error page\n   * @param request\n   * @param params\n   */\n  async exchangeCodeForSession(\n    request: Request,\n    params: {\n      redirectPath: string;\n      errorPath?: string;\n    }\n  ): Promise<{\n    nextPath: string;\n  }> {\n    const requestUrl = new URL(request.url);\n    const searchParams = requestUrl.searchParams;\n\n    const authCode = searchParams.get('code');\n    const error = searchParams.get('error');\n    const nextUrlPathFromParams = searchParams.get('next');\n    const errorPath = params.errorPath ?? '/auth/callback/error';\n\n    const nextUrl = nextUrlPathFromParams ?? params.redirectPath;\n\n    if (authCode) {\n      try {\n        const { error } =\n          await this.client.auth.exchangeCodeForSession(authCode);\n\n        // if we have an error, we redirect to the error page\n        if (error) {\n          return onError({\n            code: error.code,\n            error: error.message,\n            path: errorPath,\n          });\n        }\n      } catch (error) {\n        console.error(\n          {\n            error,\n            name: 'auth.callback',\n          },\n          'An error occurred while exchanging code for session'\n        );\n\n        const message = error instanceof Error ? error.message : error;\n\n        return onError({\n          code: (error as AuthError)?.code,\n          error: message as string,\n          path: errorPath,\n        });\n      }\n    }\n\n    if (error) {\n      return onError({\n        error,\n        path: errorPath,\n      });\n    }\n\n    return {\n      nextPath: nextUrl,\n    };\n  }\n}\n\nfunction onError({\n  error,\n  path,\n  code,\n}: {\n  error: string;\n  path: string;\n  code?: string;\n}) {\n  const errorMessage = getAuthErrorMessage({ error, code });\n\n  console.error(\n    {\n      error,\n      name: 'auth.callback',\n    },\n    'An error occurred while signing user in'\n  );\n\n  const searchParams = new URLSearchParams({\n    error: errorMessage,\n    code: code ?? '',\n  });\n\n  const nextPath = `${path}?${searchParams.toString()}`;\n\n  return {\n    nextPath,\n  };\n}\n\n/**\n * Checks if the given error message indicates a verifier error.\n * We check for this specific error because it's highly likely that the\n * user is trying to sign in using a different browser than the one they\n * used to request the sign in link. This is a common mistake, so we\n * want to provide a helpful error message.\n */\nfunction isVerifierError(error: string) {\n  return error.includes('both auth code and code verifier should be non-empty');\n}\n\n/**\n * @name getAuthErrorMessage\n * @description Get the auth error message from the error code\n * @param params\n */\nfunction getAuthErrorMessage(params: { error: string; code?: string }) {\n  // this error arises when the user tries to sign in with an expired email link\n  if (params.code) {\n    if (params.code === 'otp_expired') {\n      return 'auth:errors.otp_expired';\n    }\n  }\n\n  // this error arises when the user is trying to sign in with a different\n  // browser than the one they used to request the sign in link\n  if (isVerifierError(params.error)) {\n    return 'auth:errors.codeVerifierMismatch';\n  }\n\n  // fallback to the default error message\n  return 'auth:authenticationErrorAlertBody';\n}\n"]}