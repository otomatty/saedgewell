{"version":3,"sources":["../../src/routes/index.ts"],"names":[],"mappings":";;;;;;AAmDa,IAAA,mBAAA,GAAsB,CAKjC,OAAA,EAQA,MACG,KAAA;AAMH,EAAO,OAAA,eAAe,YACpB,CAAA,OAAA,EACA,WAGA,EAAA;AA5EJ,IAAA,IAAA,EAAA,EAAA,EAAA;AA+EI,IAAA,IAAI,IAAkB,GAAA,MAAA;AAGtB,IAAM,MAAA,mBAAA,GAAA,CAAsB,EAAQ,GAAA,MAAA,IAAA,IAAA,GAAA,MAAA,GAAA,MAAA,CAAA,OAAA,KAAR,IAAmB,GAAA,EAAA,GAAA,KAAA;AAG/C,IAAA,IAAI,mBAAqB,EAAA;AACvB,MAAM,MAAA,KAAA,GAAQ,mBAAmB,OAAO,CAAA;AAGxC,MAAA,IAAI,KAAO,EAAA;AACT,QAAA,MAAM,mBAAmB,KAAK,CAAA;AAAA,OACzB,MAAA;AACL,QAAA,OAAO,IAAI,QAAS,CAAA,2BAAA,EAA6B,EAAE,MAAA,EAAQ,KAAK,CAAA;AAAA;AAClE;AAGF,IAAA,MAAM,SAAS,uBAAwB,EAAA;AAEvC,IAAM,MAAA,gBAAA,GAAA,CAAmB,EAAQ,GAAA,MAAA,IAAA,IAAA,GAAA,MAAA,GAAA,MAAA,CAAA,IAAA,KAAR,IAAgB,GAAA,EAAA,GAAA,IAAA;AAGzC,IAAA,IAAI,gBAAkB,EAAA;AAEpB,MAAM,MAAA,IAAA,GAAO,MAAM,WAAA,CAAY,MAAM,CAAA;AAGrC,MAAA,IAAI,KAAK,KAAO,EAAA;AACd,QAAO,OAAA,QAAA,CAAS,KAAK,UAAU,CAAA;AAAA;AAGjC,MAAA,IAAA,GAAO,IAAK,CAAA,IAAA;AAAA;AAGd,IAAA,IAAI,IAEY,GAAA,MAAA;AAEhB,IAAA,IAAI,iCAAQ,MAAQ,EAAA;AAGlB,MAAA,MAAM,IAAO,GAAA,MAAM,OAAQ,CAAA,KAAA,GAAQ,IAAK,EAAA;AAExC,MAAO,IAAA,GAAA,eAAA,CAAgB,OAAO,MAAM,CAAA;AAAA,QAClC;AAAA,OACF;AAAA;AAKF,IAAA,OAAO,OAAQ,CAAA;AAAA,MACb,OAAA;AAAA,MACA,IAAA;AAAA,MACA,IAAA;AAAA,MACA,MAAA,EAAQ,MAAM,WAAY,CAAA;AAAA,KAC3B,CAAA;AAAA,GACH;AACF;AAMA,SAAS,mBAAmB,OAAsB,EAAA;AAChD,EAAO,OAAA,OAAA,CAAQ,OAAQ,CAAA,GAAA,CAAI,iBAAiB,CAAA;AAC9C","file":"index.mjs","sourcesContent":["import 'server-only';\n\nimport { redirect } from 'next/navigation';\nimport type { NextRequest, NextResponse } from 'next/server';\n\nimport type { User } from '@supabase/supabase-js';\n\nimport type { z } from 'zod';\n\nimport { verifyCaptchaToken } from '@kit/auth/captcha/server';\nimport { requireUser } from '@kit/supabase/require-user';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nimport { zodParseFactory } from '../utils';\n\ninterface Config<Schema> {\n  auth?: boolean;\n  captcha?: boolean;\n  schema?: Schema;\n}\n\ninterface HandlerParams<\n  Schema extends z.ZodType | undefined,\n  RequireAuth extends boolean | undefined,\n> {\n  request: NextRequest;\n  user: RequireAuth extends false ? undefined : User;\n  body: Schema extends z.ZodType ? z.infer<Schema> : undefined;\n  params: Record<string, string>;\n}\n\n/**\n * Enhanced route handler function.\n *\n * This function takes a request and parameters object as arguments and returns a route handler function.\n * The route handler function can be used to handle HTTP requests and apply additional enhancements\n * based on the provided parameters.\n *\n * Usage:\n * export const POST = enhanceRouteHandler(\n *   ({ request, body, user }) => {\n *     return new Response(`Hello, ${body.name}!`);\n *   },\n *   {\n *     schema: z.object({\n *       name: z.string(),\n *     }),\n *   },\n * );\n *\n */\nexport const enhanceRouteHandler = <\n  Body,\n  Params extends Config<z.ZodType<Body, z.ZodTypeDef>>,\n>(\n  // Route handler function\n  handler:\n    | ((\n        params: HandlerParams<Params['schema'], Params['auth']>\n      ) => NextResponse | Response)\n    | ((\n        params: HandlerParams<Params['schema'], Params['auth']>\n      ) => Promise<NextResponse | Response>),\n  // Parameters object\n  params?: Params\n) => {\n  /**\n   * Route handler function.\n   *\n   * This function takes a request object as an argument and returns a response object.\n   */\n  return async function routeHandler(\n    request: NextRequest,\n    routeParams: {\n      params: Promise<Record<string, string>>;\n    }\n  ) {\n    type UserParam = Params['auth'] extends false ? undefined : User;\n\n    let user: UserParam = undefined as UserParam;\n\n    // Check if the captcha token should be verified\n    const shouldVerifyCaptcha = params?.captcha ?? false;\n\n    // Verify the captcha token if required and setup\n    if (shouldVerifyCaptcha) {\n      const token = captchaTokenGetter(request);\n\n      // If the captcha token is not provided, return a 400 response.\n      if (token) {\n        await verifyCaptchaToken(token);\n      } else {\n        return new Response('Captcha token is required', { status: 400 });\n      }\n    }\n\n    const client = getSupabaseServerClient();\n\n    const shouldVerifyAuth = params?.auth ?? true;\n\n    // Check if the user should be authenticated\n    if (shouldVerifyAuth) {\n      // Get the authenticated user\n      const auth = await requireUser(client);\n\n      // If the user is not authenticated, redirect to the specified URL.\n      if (auth.error) {\n        return redirect(auth.redirectTo);\n      }\n\n      user = auth.data as UserParam;\n    }\n\n    let body: Params['schema'] extends z.ZodType\n      ? z.infer<Params['schema']>\n      : undefined = undefined;\n\n    if (params?.schema) {\n      // clone the request to read the body\n      // so that we can pass it to the handler safely\n      const json = await request.clone().json();\n\n      body = zodParseFactory(params.schema)(\n        json\n      ) as Params['schema'] extends z.ZodType\n        ? z.infer<Params['schema']>\n        : never;\n    }\n\n    return handler({\n      request,\n      body,\n      user,\n      params: await routeParams.params,\n    });\n  };\n};\n\n/**\n * Get the captcha token from the request headers.\n * @param request\n */\nfunction captchaTokenGetter(request: NextRequest) {\n  return request.headers.get('x-captcha-token');\n}\n"]}