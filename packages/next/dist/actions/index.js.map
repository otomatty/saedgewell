{"version":3,"sources":["../../../../node_modules/server-only/index.js","../../src/utils/index.ts","../../src/actions/index.ts"],"names":["verifyCaptchaToken","requireUser","getSupabaseServerClient","redirect"],"mappings":";;;;;;;;AAAA,MAAM,IAAI,KAAA;AAAA,EACR;AAEF,CAAA;;;ACDO,IAAM,eACX,GAAA,CAAyB,MACzB,KAAA,CAAC,IAA8B,KAAA;AAC7B,EAAI,IAAA;AACF,IAAO,OAAA,MAAA,CAAO,MAAM,IAAI,CAAA;AAAA,WACjB,GAAK,EAAA;AACZ,IAAA,OAAA,CAAQ,MAAM,GAAG,CAAA;AAGjB,IAAA,MAAM,IAAI,KAAA,CAAM,CAAiB,cAAA,EAAA,GAAa,CAAE,CAAA,CAAA;AAAA;AAEpD,CAAA;;;ACKK,SAAS,aAAA,CAYd,IAIA,MACA,EAAA;AACA,EAAA,OAAO,OACL,MACG,KAAA;AAtCP,IAAA,IAAA,EAAA,EAAA,EAAA;AAyCI,IAAM,MAAA,WAAA,GAAA,CAAc,EAAO,GAAA,MAAA,CAAA,IAAA,KAAP,IAAe,GAAA,EAAA,GAAA,IAAA;AACnC,IAAA,IAAI,IAAkB,GAAA,MAAA;AAGtB,IAAM,MAAA,IAAA,GAAO,OAAO,MAChB,GAAA,eAAA,CAAgB,OAAO,MAAM,CAAA,CAAE,MAAM,CACrC,GAAA,MAAA;AAGJ,IAAM,MAAA,aAAA,GAAA,CAAgB,EAAO,GAAA,MAAA,CAAA,OAAA,KAAP,IAAkB,GAAA,EAAA,GAAA,KAAA;AAGxC,IAAA,IAAI,aAAe,EAAA;AACjB,MAAA,MAAM,QAAS,IAAyC,CAAA,YAAA;AAGxD,MAAA,MAAMA,0BAAmB,KAAK,CAAA;AAAA;AAIhC,IAAA,IAAI,WAAa,EAAA;AAEf,MAAA,MAAM,IAAO,GAAA,MAAMC,uBAAY,CAAAC,oCAAA,EAAyB,CAAA;AAGxD,MAAI,IAAA,CAAC,KAAK,IAAM,EAAA;AACd,QAAAC,mBAAA,CAAS,KAAK,UAAU,CAAA;AAAA;AAG1B,MAAA,IAAA,GAAO,IAAK,CAAA,IAAA;AAAA;AAGd,IAAO,OAAA,EAAA,CAAG,MAAM,IAAI,CAAA;AAAA,GACtB;AACF","file":"index.js","sourcesContent":["throw new Error(\n  \"This module cannot be imported from a Client Component module. \" +\n    \"It should only be used from a Server Component.\"\n);\n","import type { z } from 'zod';\n\nexport const zodParseFactory =\n  <T extends z.ZodTypeAny>(schema: T) =>\n  (data: unknown): z.infer<T> => {\n    try {\n      return schema.parse(data) as unknown;\n    } catch (err) {\n      console.error(err);\n\n      // handle error\n      throw new Error(`Invalid data: ${err as string}`);\n    }\n  };\n","import 'server-only';\n\nimport { redirect } from 'next/navigation';\n\nimport type { User } from '@supabase/supabase-js';\n\nimport type { ZodType, z } from 'zod';\n\nimport { verifyCaptchaToken } from '@kit/auth/captcha/server';\nimport { requireUser } from '@kit/supabase/require-user';\nimport { getSupabaseServerClient } from '@kit/supabase/server-client';\n\nimport { zodParseFactory } from '../utils';\n\n/**\n * @name enhanceAction\n * @description Enhance an action with captcha, schema and auth checks\n */\nexport function enhanceAction<\n  Args,\n  Response,\n  Config extends {\n    auth?: boolean;\n    captcha?: boolean;\n    schema?: z.ZodType<\n      Config['captcha'] extends true ? Args & { captchaToken: string } : Args,\n      z.ZodTypeDef\n    >;\n  },\n>(\n  fn: (\n    params: Config['schema'] extends ZodType ? z.infer<Config['schema']> : Args,\n    user: Config['auth'] extends false ? undefined : User\n  ) => Response | Promise<Response>,\n  config: Config\n) {\n  return async (\n    params: Config['schema'] extends ZodType ? z.infer<Config['schema']> : Args\n  ) => {\n    type UserParam = Config['auth'] extends false ? undefined : User;\n\n    const requireAuth = config.auth ?? true;\n    let user: UserParam = undefined as UserParam;\n\n    // validate the schema passed in the config if it exists\n    const data = config.schema\n      ? zodParseFactory(config.schema)(params)\n      : params;\n\n    // by default, the CAPTCHA token is not required\n    const verifyCaptcha = config.captcha ?? false;\n\n    // verify the CAPTCHA token. It will throw an error if the token is invalid.\n    if (verifyCaptcha) {\n      const token = (data as Args & { captchaToken: string }).captchaToken;\n\n      // Verify the CAPTCHA token. It will throw an error if the token is invalid.\n      await verifyCaptchaToken(token);\n    }\n\n    // verify the user is authenticated if required\n    if (requireAuth) {\n      // verify the user is authenticated if required\n      const auth = await requireUser(getSupabaseServerClient());\n\n      // If the user is not authenticated, redirect to the specified URL.\n      if (!auth.data) {\n        redirect(auth.redirectTo);\n      }\n\n      user = auth.data as UserParam;\n    }\n\n    return fn(data, user);\n  };\n}\n"]}