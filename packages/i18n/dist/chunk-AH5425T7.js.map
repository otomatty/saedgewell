{"version":3,"sources":["../src/i18n.client.ts"],"names":["i18next","resourcesToBackend","LanguageDetector","initReactI18next","__spreadProps"],"mappings":";;;;;;;;;;;;;;AAMA,IAAI,SAAY,GAAA,CAAA;AAGhB,IAAM,cAAiB,GAAA,EAAA;AAOvB,eAAsB,oBAAA,CACpB,UACA,QACe,EAAA;AACf,EAAA,MAAM,kBAA4B,EAAC;AACnC,EAAA,MAAM,mBAA6B,EAAC;AAEpC,EAAA,MAAMA,wBACH,CAAA,GAAA;AAAA,IACCC,mCAAmB,CAAA,OAAO,QAAU,EAAA,SAAA,EAAW,QAAa,KAAA;AAC1D,MAAA,MAAM,IAAO,GAAA,MAAM,QAAS,CAAA,QAAA,EAAU,SAAS,CAAA;AAE/C,MAAA,IAAI,CAAC,eAAA,CAAgB,QAAS,CAAA,QAAQ,CAAG,EAAA;AACvC,QAAA,eAAA,CAAgB,KAAK,QAAQ,CAAA;AAAA;AAG/B,MAAA,IAAI,CAAC,gBAAA,CAAiB,QAAS,CAAA,SAAS,CAAG,EAAA;AACzC,QAAA,gBAAA,CAAiB,KAAK,SAAS,CAAA;AAAA;AAGjC,MAAO,OAAA,QAAA,CAAS,MAAM,IAAI,CAAA;AAAA,KAC3B;AAAA,IAEF,GAAI,CAAAC,iCAAgB,CACpB,CAAA,GAAA,CAAIC,6BAAgB,CACpB,CAAA,IAAA;AAAA,IACCC,mEACK,QADL,CAAA,EAAA;AAAA,MAEE,SAAW,EAAA;AAAA,QACT,KAAO,EAAA,CAAC,SAAW,EAAA,QAAA,EAAU,WAAW,CAAA;AAAA,QACxC,MAAA,EAAQ,CAAC,QAAQ,CAAA;AAAA,QACjB,YAAc,EAAA;AAAA,OAChB;AAAA,MACA,aAAe,EAAA;AAAA,QACb,WAAa,EAAA;AAAA;AACf,KACF,CAAA;AAAA,IACA,CAAC,GAAQ,KAAA;AACP,MAAA,IAAI,GAAK,EAAA;AACP,QAAQ,OAAA,CAAA,KAAA,CAAM,kCAAkC,GAAG,CAAA;AAAA;AACrD;AACF,GACF;AAIF,EAAA,IAAI,aAAa,cAAgB,EAAA;AAC/B,IAAQ,OAAA,CAAA,KAAA,CAAM,CAA2B,wBAAA,EAAA,cAAc,CAAE,CAAA,CAAA;AAEzD,IAAO,OAAAJ,wBAAA;AAAA;AAIT,EAAA,IAAI,eAAgB,CAAA,MAAA,KAAW,CAAK,IAAA,gBAAA,CAAiB,WAAW,CAAG,EAAA;AACjE,IAAA,SAAA,EAAA;AAEA,IAAQ,OAAA,CAAA,KAAA;AAAA,MACN,CAAA,sFAAA,EAAyF,SAAS,CAAA,kBAAA,EAAqB,cAAc,CAAA,YAAA;AAAA,KACvI;AAEA,IAAM,MAAA,IAAI,MAAM,mCAAmC,CAAA;AAAA;AAGrD,EAAO,OAAAA,wBAAA;AACT","file":"chunk-AH5425T7.js","sourcesContent":["import i18next, { type InitOptions, type i18n } from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport resourcesToBackend from 'i18next-resources-to-backend';\nimport { initReactI18next } from 'react-i18next';\n\n// Keep track of the number of iterations\nlet iteration = 0;\n\n// Maximum number of iterations\nconst MAX_ITERATIONS = 20;\n\n/**\n * Initialize the i18n instance on the client.\n * @param settings - the i18n settings\n * @param resolver - a function that resolves the i18n resources\n */\nexport async function initializeI18nClient(\n  settings: InitOptions,\n  resolver: (lang: string, namespace: string) => Promise<object>\n): Promise<i18n> {\n  const loadedLanguages: string[] = [];\n  const loadedNamespaces: string[] = [];\n\n  await i18next\n    .use(\n      resourcesToBackend(async (language, namespace, callback) => {\n        const data = await resolver(language, namespace);\n\n        if (!loadedLanguages.includes(language)) {\n          loadedLanguages.push(language);\n        }\n\n        if (!loadedNamespaces.includes(namespace)) {\n          loadedNamespaces.push(namespace);\n        }\n\n        return callback(null, data);\n      })\n    )\n    .use(LanguageDetector)\n    .use(initReactI18next)\n    .init(\n      {\n        ...settings,\n        detection: {\n          order: ['htmlTag', 'cookie', 'navigator'],\n          caches: ['cookie'],\n          lookupCookie: 'lang',\n        },\n        interpolation: {\n          escapeValue: false,\n        },\n      },\n      (err) => {\n        if (err) {\n          console.error('Error initializing i18n client', err);\n        }\n      }\n    );\n\n  // to avoid infinite loops, we return the i18next instance after a certain number of iterations\n  // even if the languages and namespaces are not loaded\n  if (iteration >= MAX_ITERATIONS) {\n    console.debug(`Max iterations reached: ${MAX_ITERATIONS}`);\n\n    return i18next;\n  }\n\n  // keep component from rendering if no languages or namespaces are loaded\n  if (loadedLanguages.length === 0 || loadedNamespaces.length === 0) {\n    iteration++;\n\n    console.debug(\n      `Keeping component from rendering if no languages or namespaces are loaded. Iteration: ${iteration}. Will stop after ${MAX_ITERATIONS} iterations.`\n    );\n\n    throw new Error('No languages or namespaces loaded');\n  }\n\n  return i18next;\n}\n"]}