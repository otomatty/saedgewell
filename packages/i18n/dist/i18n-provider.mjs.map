{"version":3,"sources":["../src/i18n-provider.tsx"],"names":[],"mappings":";;;;AAYO,SAAS,YAAa,CAAA;AAAA,EAC3B,QAAA;AAAA,EACA,QAAA;AAAA,EACA,QAAA;AAAA,EACA;AACF,CAII,EAAA;AACF,EAAc,aAAA,CAAA,QAAA,EAAU,UAAU,QAAQ,CAAA;AAE1C,EAAA,uBAAQ,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA,EAAgB,IAAM,EAAA,QAAA,EAAA,EAAW,QAAS,CAAA;AACpD;AASA,SAAS,aAAA,CACP,QACA,EAAA,QAAA,EACA,QACA,EAAA;AACA,EAAA,IAAI,CAAC,QAAA,IAAY,QAAS,CAAA,QAAA,KAAa,SAAS,GAAK,EAAA;AACnD,IAAM,MAAA,gBAAA,CAAiB,UAAU,QAAQ,CAAA;AAAA;AAG3C,EAAO,OAAA,QAAA;AACT;AAEA,eAAe,gBAAA,CAAiB,UAAuB,QAAoB,EAAA;AACzE,EAAO,OAAA,MAAM,oBAAqB,CAAA,QAAA,EAAU,QAAQ,CAAA;AACtD","file":"i18n-provider.mjs","sourcesContent":["'use client';\n\nimport type { InitOptions, i18n } from 'i18next';\nimport { I18nextProvider } from 'react-i18next';\n\nimport { initializeI18nClient } from './i18n.client';\n\ntype Resolver = (\n  lang: string,\n  namespace: string\n) => Promise<Record<string, string>>;\n\nexport function I18nProvider({\n  settings,\n  children,\n  resolver,\n  instance,\n}: React.PropsWithChildren<{\n  settings: InitOptions;\n  resolver: Resolver;\n  instance: i18n;\n}>) {\n  useI18nClient(settings, resolver, instance);\n\n  return <I18nextProvider i18n={instance}>{children}</I18nextProvider>;\n}\n\n/**\n * @name useI18nClient\n * @description A hook that initializes the i18n client.\n * @param settings\n * @param resolver\n * @param instance\n */\nfunction useI18nClient(\n  settings: InitOptions,\n  resolver: Resolver,\n  instance: i18n\n) {\n  if (!instance || instance.language !== settings.lng) {\n    throw loadI18nInstance(settings, resolver);\n  }\n\n  return instance;\n}\n\nasync function loadI18nInstance(settings: InitOptions, resolver: Resolver) {\n  return await initializeI18nClient(settings, resolver);\n}\n"]}