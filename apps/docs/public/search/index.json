[{"id":"type-1","title":"プログラミング書籍","description":"プログラミング関連の書籍やチュートリアル","path":"/programming-book","category":"documents","content":"プログラミング書籍 プログラミング関連の書籍やチュートリアル"},{"id":"type-2","title":"技術用語","description":"プログラミングや開発に関する技術用語の解説","path":"/technical-terms","category":"wiki","content":"技術用語 プログラミングや開発に関する技術用語の解説"},{"id":"type-3","title":"業務用語","description":"プロジェクトマネジメントやビジネスに関する用語の解説","path":"/business-terms","category":"wiki","content":"業務用語 プロジェクトマネジメントやビジネスに関する用語の解説"},{"id":"type-4","title":"Next.js","description":"Next.jsの公式ドキュメント","path":"/nextjs-docs","category":"documents","content":"Next.js Next.jsの公式ドキュメント"},{"id":"type-5","title":"Supabase","description":"Supabaseの公式ドキュメント","path":"/supabase-docs","category":"documents","content":"Supabase Supabaseの公式ドキュメント"},{"id":"type-6","title":"React","description":"Reactの公式ドキュメント","path":"/react-docs","category":"documents","content":"React Reactの公式ドキュメント"},{"id":"type-7","title":"Saedgewell App","description":"メインアプリケーション","path":"/saedgewell-app","category":"documents","content":"Saedgewell App メインアプリケーション"},{"id":"type-8","title":"Saedgewell Docs","description":"ドキュメントサイト","path":"/saedgewell-docs","category":"documents","content":"Saedgewell Docs ドキュメントサイト"},{"id":"type-9","title":"Saedgewell API","description":"APIサーバー","path":"/saedgewell-api","category":"documents","content":"Saedgewell API APIサーバー"},{"id":"wiki-10","title":"REST API","description":"RESTful APIの概念と設計原則","path":"/wiki/rest-api","category":"wiki","content":"\n# REST API\n\nREST（Representational State Transfer）は、Webサービスを設計するためのアーキテクチャスタイルです。RESTful APIは、HTTPプロトコルを使用してリソースにアクセスし、操作するためのインターフェースを提供します。\n\n## 主な特徴\n\n- **ステートレス**: 各リクエストは独立しており、サーバーはクライアントの状態を保持しません。\n- **リソース指向**: すべてのリソースは一意のURIで識別されます。\n- **HTTPメソッド**: GET, POST, PUT, DELETE などのHTTPメソッドを使用してリソースを操作します。\n- **表現**: リソースはJSON, XML, HTMLなど様々な形式で表現できます。\n\n## RESTful APIの設計原則\n\n1. **URIでリソースを表現する**\n   ```\n   /users           # ユーザーリソースのコレクション\n   /users/123       # ID 123のユーザーリソース\n   ```\n\n2. **HTTPメソッドでアクションを表現する**\n   - GET: リソースの取得\n   - POST: リソースの作成\n   - PUT: リソースの更新\n   - DELETE: リソースの削除\n\n3. **適切なHTTPステータスコードを返す**\n   - 200: OK\n   - 201: Created\n   - 400: Bad Request\n   - 404: Not Found\n   - 500: Internal Server Error\n\n## RESTful APIの利点\n\n- シンプルで理解しやすい\n- スケーラブル\n- キャッシュ可能\n- プラットフォーム非依存\n- 広く採用されている標準 "},{"id":"wiki-11","title":"スクラム","description":"アジャイル開発手法の一つであるスクラムの概要","path":"/wiki/scrum","category":"wiki","content":"\n# スクラム\n\nスクラムは、複雑な製品開発のためのフレームワークであり、アジャイル開発手法の一つです。反復的かつ漸進的なアプローチを採用し、チームの自己組織化と継続的な改善を重視します。\n\n## スクラムの主要な要素\n\n### ロール\n\n- **プロダクトオーナー**: 製品の価値を最大化する責任を持ち、プロダクトバックログを管理します。\n- **スクラムマスター**: スクラムの理解と実践を促進し、チームの障害を取り除く役割を担います。\n- **開発チーム**: 実際に製品を開発する自己組織化されたチームです。\n\n### イベント\n\n- **スプリント**: 通常2〜4週間の固定期間で、その間に「完成」した製品インクリメントを作成します。\n- **スプリントプランニング**: スプリントで何をどのように達成するかを計画します。\n- **デイリースクラム**: 15分以内の毎日のミーティングで、進捗を確認し、次の24時間の計画を立てます。\n- **スプリントレビュー**: スプリント終了時に成果物を検証し、フィードバックを得ます。\n- **スプリントレトロスペクティブ**: チームのプロセスを振り返り、改善点を特定します。\n\n### 成果物\n\n- **プロダクトバックログ**: 製品に必要な全ての機能や要件のリストです。\n- **スプリントバックログ**: 現在のスプリントで実装する項目と、それを完了するための計画です。\n- **インクリメント**: スプリント終了時に「完成」した製品の一部です。\n\n## スクラムの利点\n\n- 透明性の向上\n- 早期かつ定期的なフィードバック\n- リスクの早期発見と対応\n- チームの自己組織化と責任感の向上\n- 顧客満足度の向上 "}]