---
description: 製品用件定義(PRD)を作成するためのルール
globs: docs
alwaysApply: false
---
- 以下の内容に基づいて製品用件定義書(PRD)を作成する
- 用件定義で不明な部分があれば必ず質問する
- ドキュメントファイルは.docs/requirementsに配置する

=========================================

# 製品要件書 (PRD) テンプレート

## 1. プロジェクト概要

### 1.1 製品名
- 製品の正式名称
- 開発コードネームがある場合は併記

### 1.2 目的
- 製品が解決する課題
- 製品の存在意義
- 期待される効果や影響

### 1.3 対象範囲
- 製品が対象とする領域や状況
- 対象から除外される領域や状況
- 将来的な拡張可能性

## 2. 製品目標

製品が達成すべき主要な目標を3-5個程度記述：

1. **目標1**：具体的な目標と、その達成により得られる価値
2. **目標2**：具体的な目標と、その達成により得られる価値
3. **目標3**：具体的な目標と、その達成により得られる価値

各目標には以下の要素を含める：
- 定量的な成功指標
- 達成までのタイムライン
- 測定方法

## 3. ユーザーストーリー

各ユーザー層について以下の形式で記述：

1. **[ユーザー層]として**、[したいこと]をしたい。それにより、[得られる価値]が実現できる。

記述のポイント：
- 具体的なユーザー層の定義
- 実現したい行動や目的
- その行動により得られる価値や効果
- 優先順位付け

## 4. 機能要件

### 4.1 コア機能（P0）
必須で実装すべき機能を記述：

#### データモデル
```typescript
interface CoreFeature {
  // 主要なデータ構造
  // 必須フィールド
  // 型定義
}
```

#### 主要機能
- 機能の目的
- 入力と出力
- 処理フロー
- 制約条件

### 4.2 重要機能（P1）
重要だが必須ではない機能：
- 機能の概要
- 実装の優先度
- 依存関係

### 4.3 追加機能（P2）
あると良い機能：
- 機能の概要
- 実装条件
- 期待される効果

## 5. 技術要件

### 5.1 アーキテクチャ
- システム構成
- 使用技術
- インフラ構成

### 5.2 パフォーマンス要件
- レスポンス時間
- スループット
- リソース使用量

### 5.3 セキュリティ要件
- 認証・認可
- データ保護
- コンプライアンス

## 6. 開発計画

### 6.1 フェーズ1: MVP
- [ ] 最小機能セット
- [ ] 期間
- [ ] 成功基準

### 6.2 フェーズ2: 機能拡張
- [ ] 追加機能
- [ ] 改善項目
- [ ] 期間

### 6.3 フェーズ3: 最適化
- [ ] パフォーマンス改善
- [ ] ユーザーフィードバック対応
- [ ] 期間

## 7. 制約条件

### 7.1 技術的制約
- 使用必須技術
- 互換性要件
- パフォーマンス制限

### 7.2 ビジネス制約
- 予算
- 期間
- リソース

### 7.3 法的制約
- 法令遵守事項
- ライセンス要件
- プライバシー要件

## 8. 成功指標

### 8.1 定量的指標
- ユーザー数
- 使用頻度
- エラー率
- パフォーマンス指標

### 8.2 定性的指標
- ユーザー満足度
- 使いやすさ
- 信頼性
- ブランド価値

## 9. リスクと対策

### 9.1 技術リスク
- 想定されるリスク
- 影響度
- 対策案

### 9.2 ビジネスリスク
- 市場リスク
- 競合リスク
- 対策案

## 10. 付録

### 10.1 用語集
- 専門用語の定義
- 略語の説明
- 共通理解が必要な用語

### 10.2 参考資料
- 関連ドキュメント
- 参考URL
- 技術文書 

=========================================
