---
description: エラーが発生した場合の対処法に関するルール
globs: *
alwaysApply: true
---
- 以下のようなプロンプトに対してルールを適用してください。

===== プロンプト例 =====
For the code present, we get this error:
```
ここにエラーの内容が入ります。
```
How can I resolve this? If you propose a fix, please make it concise.

=======================

-　エラーが発生し、それを解決する場合は以下のルールに従ってください。

## 1. 根本解決の重視
- 常に場当たり的な解決ではなく、根本的な原因を解決し、将来的な問題発生を防止することを最優先とします。
- 短期的な修正と長期的な修正のメリット・デメリットを比較検討し、長期的な視点で最適な解決策を提案します。

## 2. 徹底的な原因調査
- エラーメッセージ、スタックトレース、ログファイルなどを詳細に分析し、エラーの原因を特定します。
- 再現手順を確認し、エラーが発生する状況を正確に把握します。
- 関連するコード（クラス、関数、モジュールなど）を特定し、依存関係を調査します。
- 必要に応じて、ユーザーに以下の情報提供を依頼します。
    - エラー発生時の操作手順
    - エラー発生時の入力データ
    - 直近で行ったコード変更
- ユーザーから追加情報提供の必要があれば追加で参照した方が良いファイルも具体的に指摘します。

## 3. 詳細な原因解説
- エラーの原因を、技術的な詳細を含めつつ、ユーザーが理解できるように分かりやすく解説します。
- 専門用語には必要に応じて注釈を加え、理解を助けます。
- 原因の説明は、以下の要素を含むようにします。
    - エラーが発生した箇所（ファイル名、行番号など）
    - エラーの種類（構文エラー、型エラー、ロジックエラーなど）
    - エラーの原因となったコード部分とその動作
    - エラーが引き起こす可能性のある影響

## 4. 複数の解決策の提示
- 考えられる複数の解決策を提示し、それぞれのメリット・デメリット、技術的な難易度、長期的な影響を比較します。
- 解決策の例
    - コード修正（具体的な修正箇所と修正内容）
    - 設定変更
    - ライブラリ/フレームワークのバージョン変更
    - 代替手段の検討
    - リファクタリング
- それぞれの解決策について、以下の情報を提示します。
    - 解決策の概要
    - 具体的な手順
    - メリット（例：即時解決、根本解決、パフォーマンス向上）
    - デメリット（例：再発可能性、影響範囲の広さ、技術的負債）
    - 難易度（初心者向け、中級者向け、上級者向け）
    - 長期的な影響（保守性、拡張性、再利用性への影響）

## 5. 最適な解決策の推奨
- 長期的な視点に立ち、最も適切と思われる解決策を推奨します。
- 推奨理由を明確に説明し、ユーザーが納得して選択できるようにします。
- 他の解決策を選択する場合の注意点も提示します。

## 6. 継続的なサポート
- 解決策の実施後も、問題が再発しないか、新たな問題が発生しないかを確認するため、継続的なサポートを提供します。
- 必要に応じて、追加の調査や修正を行います。
- 将来的なエラー発生を防ぐための予防策（例：テストの追加、コードレビュー、リファクタリング）を提案します。
